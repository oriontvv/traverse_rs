<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="885.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="885.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (27 samples, 0.29%)</title><rect x="0.0543%" y="789" width="0.2931%" height="15" fill="rgb(227,0,7)"/><text x="0.3043%" y="799.50"></text></g><g><title>[[heap]] (28 samples, 0.30%)</title><rect x="0.0543%" y="821" width="0.3039%" height="15" fill="rgb(217,0,24)"/><text x="0.3043%" y="831.50"></text></g><g><title>_int_malloc (28 samples, 0.30%)</title><rect x="0.0543%" y="805" width="0.3039%" height="15" fill="rgb(221,193,54)"/><text x="0.3043%" y="815.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="805" width="0.6187%" height="15" fill="rgb(248,212,6)"/><text x="0.7276%" y="815.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="789" width="0.6187%" height="15" fill="rgb(208,68,35)"/><text x="0.7276%" y="799.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="773" width="0.6187%" height="15" fill="rgb(232,128,0)"/><text x="0.7276%" y="783.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="757" width="0.6187%" height="15" fill="rgb(207,160,47)"/><text x="0.7276%" y="767.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="741" width="0.6187%" height="15" fill="rgb(228,23,34)"/><text x="0.7276%" y="751.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="725" width="0.6187%" height="15" fill="rgb(218,30,26)"/><text x="0.7276%" y="735.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="709" width="0.6187%" height="15" fill="rgb(220,122,19)"/><text x="0.7276%" y="719.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="693" width="0.6187%" height="15" fill="rgb(250,228,42)"/><text x="0.7276%" y="703.50"></text></g><g><title>[unknown] (57 samples, 0.62%)</title><rect x="0.4776%" y="677" width="0.6187%" height="15" fill="rgb(240,193,28)"/><text x="0.7276%" y="687.50"></text></g><g><title>[unknown] (44 samples, 0.48%)</title><rect x="0.6187%" y="661" width="0.4776%" height="15" fill="rgb(216,20,37)"/><text x="0.8687%" y="671.50"></text></g><g><title>[unknown] (42 samples, 0.46%)</title><rect x="0.6404%" y="645" width="0.4559%" height="15" fill="rgb(206,188,39)"/><text x="0.8904%" y="655.50"></text></g><g><title>[unknown] (39 samples, 0.42%)</title><rect x="0.6730%" y="629" width="0.4233%" height="15" fill="rgb(217,207,13)"/><text x="0.9230%" y="639.50"></text></g><g><title>[unknown] (28 samples, 0.30%)</title><rect x="0.7924%" y="613" width="0.3039%" height="15" fill="rgb(231,73,38)"/><text x="1.0424%" y="623.50"></text></g><g><title>[unknown] (21 samples, 0.23%)</title><rect x="0.8683%" y="597" width="0.2279%" height="15" fill="rgb(225,20,46)"/><text x="1.1183%" y="607.50"></text></g><g><title>[unknown] (13 samples, 0.14%)</title><rect x="0.9552%" y="581" width="0.1411%" height="15" fill="rgb(210,31,41)"/><text x="1.2052%" y="591.50"></text></g><g><title>__libc_start_main (14 samples, 0.15%)</title><rect x="1.1180%" y="805" width="0.1520%" height="15" fill="rgb(221,200,47)"/><text x="1.3680%" y="815.50"></text></g><g><title>main (14 samples, 0.15%)</title><rect x="1.1180%" y="789" width="0.1520%" height="15" fill="rgb(226,26,5)"/><text x="1.3680%" y="799.50"></text></g><g><title>std::rt::lang_start_internal (14 samples, 0.15%)</title><rect x="1.1180%" y="773" width="0.1520%" height="15" fill="rgb(249,33,26)"/><text x="1.3680%" y="783.50"></text></g><g><title>std::panic::catch_unwind (14 samples, 0.15%)</title><rect x="1.1180%" y="757" width="0.1520%" height="15" fill="rgb(235,183,28)"/><text x="1.3680%" y="767.50"></text></g><g><title>std::panicking::try (14 samples, 0.15%)</title><rect x="1.1180%" y="741" width="0.1520%" height="15" fill="rgb(221,5,38)"/><text x="1.3680%" y="751.50"></text></g><g><title>std::panicking::try::do_call (14 samples, 0.15%)</title><rect x="1.1180%" y="725" width="0.1520%" height="15" fill="rgb(247,18,42)"/><text x="1.3680%" y="735.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14 samples, 0.15%)</title><rect x="1.1180%" y="709" width="0.1520%" height="15" fill="rgb(241,131,45)"/><text x="1.3680%" y="719.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (14 samples, 0.15%)</title><rect x="1.1180%" y="693" width="0.1520%" height="15" fill="rgb(249,31,29)"/><text x="1.3680%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14 samples, 0.15%)</title><rect x="1.1180%" y="677" width="0.1520%" height="15" fill="rgb(225,111,53)"/><text x="1.3680%" y="687.50"></text></g><g><title>traverse_rs::main (14 samples, 0.15%)</title><rect x="1.1180%" y="661" width="0.1520%" height="15" fill="rgb(238,160,17)"/><text x="1.3680%" y="671.50"></text></g><g><title>serde_json::de::from_reader (14 samples, 0.15%)</title><rect x="1.1180%" y="645" width="0.1520%" height="15" fill="rgb(214,148,48)"/><text x="1.3680%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="629" width="0.1520%" height="15" fill="rgb(232,36,49)"/><text x="1.3680%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.15%)</title><rect x="1.1180%" y="613" width="0.1520%" height="15" fill="rgb(209,103,24)"/><text x="1.3680%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (14 samples, 0.15%)</title><rect x="1.1180%" y="597" width="0.1520%" height="15" fill="rgb(229,88,8)"/><text x="1.3680%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="581" width="0.1520%" height="15" fill="rgb(213,181,19)"/><text x="1.3680%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.15%)</title><rect x="1.1180%" y="565" width="0.1520%" height="15" fill="rgb(254,191,54)"/><text x="1.3680%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (14 samples, 0.15%)</title><rect x="1.1180%" y="549" width="0.1520%" height="15" fill="rgb(241,83,37)"/><text x="1.3680%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="533" width="0.1520%" height="15" fill="rgb(233,36,39)"/><text x="1.3680%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="517" width="0.1520%" height="15" fill="rgb(226,3,54)"/><text x="1.3680%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="501" width="0.1520%" height="15" fill="rgb(245,192,40)"/><text x="1.3680%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.15%)</title><rect x="1.1180%" y="485" width="0.1520%" height="15" fill="rgb(238,167,29)"/><text x="1.3680%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (14 samples, 0.15%)</title><rect x="1.1180%" y="469" width="0.1520%" height="15" fill="rgb(232,182,51)"/><text x="1.3680%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="453" width="0.1520%" height="15" fill="rgb(231,60,39)"/><text x="1.3680%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (14 samples, 0.15%)</title><rect x="1.1180%" y="437" width="0.1520%" height="15" fill="rgb(208,69,12)"/><text x="1.3680%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.15%)</title><rect x="1.1180%" y="421" width="0.1520%" height="15" fill="rgb(235,93,37)"/><text x="1.3680%" y="431.50"></text></g><g><title>_int_malloc (16 samples, 0.17%)</title><rect x="1.2699%" y="805" width="0.1737%" height="15" fill="rgb(213,116,39)"/><text x="1.5199%" y="815.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="1.2699%" y="789" width="0.1737%" height="15" fill="rgb(222,207,29)"/><text x="1.5199%" y="799.50"></text></g><g><title>std::rt::lang_start_internal (13 samples, 0.14%)</title><rect x="1.4762%" y="805" width="0.1411%" height="15" fill="rgb(206,96,30)"/><text x="1.7262%" y="815.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.14%)</title><rect x="1.4762%" y="789" width="0.1411%" height="15" fill="rgb(218,138,4)"/><text x="1.7262%" y="799.50"></text></g><g><title>std::panicking::try (13 samples, 0.14%)</title><rect x="1.4762%" y="773" width="0.1411%" height="15" fill="rgb(250,191,14)"/><text x="1.7262%" y="783.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.14%)</title><rect x="1.4762%" y="757" width="0.1411%" height="15" fill="rgb(239,60,40)"/><text x="1.7262%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13 samples, 0.14%)</title><rect x="1.4762%" y="741" width="0.1411%" height="15" fill="rgb(206,27,48)"/><text x="1.7262%" y="751.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (13 samples, 0.14%)</title><rect x="1.4762%" y="725" width="0.1411%" height="15" fill="rgb(225,35,8)"/><text x="1.7262%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.14%)</title><rect x="1.4762%" y="709" width="0.1411%" height="15" fill="rgb(250,213,24)"/><text x="1.7262%" y="719.50"></text></g><g><title>traverse_rs::main (13 samples, 0.14%)</title><rect x="1.4762%" y="693" width="0.1411%" height="15" fill="rgb(247,123,22)"/><text x="1.7262%" y="703.50"></text></g><g><title>serde_json::de::from_reader (13 samples, 0.14%)</title><rect x="1.4762%" y="677" width="0.1411%" height="15" fill="rgb(231,138,38)"/><text x="1.7262%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="661" width="0.1411%" height="15" fill="rgb(231,145,46)"/><text x="1.7262%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 0.14%)</title><rect x="1.4762%" y="645" width="0.1411%" height="15" fill="rgb(251,118,11)"/><text x="1.7262%" y="655.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (13 samples, 0.14%)</title><rect x="1.4762%" y="629" width="0.1411%" height="15" fill="rgb(217,147,25)"/><text x="1.7262%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="613" width="0.1411%" height="15" fill="rgb(247,81,37)"/><text x="1.7262%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 0.14%)</title><rect x="1.4762%" y="597" width="0.1411%" height="15" fill="rgb(209,12,38)"/><text x="1.7262%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (13 samples, 0.14%)</title><rect x="1.4762%" y="581" width="0.1411%" height="15" fill="rgb(227,1,9)"/><text x="1.7262%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="565" width="0.1411%" height="15" fill="rgb(248,47,43)"/><text x="1.7262%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="549" width="0.1411%" height="15" fill="rgb(221,10,30)"/><text x="1.7262%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="533" width="0.1411%" height="15" fill="rgb(210,229,1)"/><text x="1.7262%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 0.14%)</title><rect x="1.4762%" y="517" width="0.1411%" height="15" fill="rgb(222,148,37)"/><text x="1.7262%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (13 samples, 0.14%)</title><rect x="1.4762%" y="501" width="0.1411%" height="15" fill="rgb(234,67,33)"/><text x="1.7262%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="485" width="0.1411%" height="15" fill="rgb(247,98,35)"/><text x="1.7262%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="469" width="0.1411%" height="15" fill="rgb(247,138,52)"/><text x="1.7262%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 0.14%)</title><rect x="1.4762%" y="453" width="0.1411%" height="15" fill="rgb(213,79,30)"/><text x="1.7262%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (13 samples, 0.14%)</title><rect x="1.4762%" y="437" width="0.1411%" height="15" fill="rgb(246,177,23)"/><text x="1.7262%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="421" width="0.1411%" height="15" fill="rgb(230,62,27)"/><text x="1.7262%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (13 samples, 0.14%)</title><rect x="1.4762%" y="405" width="0.1411%" height="15" fill="rgb(216,154,8)"/><text x="1.7262%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 0.14%)</title><rect x="1.4762%" y="389" width="0.1411%" height="15" fill="rgb(244,35,45)"/><text x="1.7262%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (12 samples, 0.13%)</title><rect x="1.4870%" y="373" width="0.1303%" height="15" fill="rgb(251,115,12)"/><text x="1.7370%" y="383.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.13%)</title><rect x="1.4870%" y="357" width="0.1303%" height="15" fill="rgb(240,54,50)"/><text x="1.7370%" y="367.50"></text></g><g><title>_int_malloc (12 samples, 0.13%)</title><rect x="1.4870%" y="341" width="0.1303%" height="15" fill="rgb(233,84,52)"/><text x="1.7370%" y="351.50"></text></g><g><title>[unknown] (119 samples, 1.29%)</title><rect x="0.4342%" y="821" width="1.2917%" height="15" fill="rgb(207,117,47)"/><text x="0.6842%" y="831.50"></text></g><g><title>traverse_rs::main (10 samples, 0.11%)</title><rect x="1.6173%" y="805" width="0.1085%" height="15" fill="rgb(249,43,39)"/><text x="1.8673%" y="815.50"></text></g><g><title>serde_json::de::from_reader (10 samples, 0.11%)</title><rect x="1.6173%" y="789" width="0.1085%" height="15" fill="rgb(209,38,44)"/><text x="1.8673%" y="799.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.11%)</title><rect x="1.6173%" y="773" width="0.1085%" height="15" fill="rgb(236,212,23)"/><text x="1.8673%" y="783.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.11%)</title><rect x="1.6173%" y="757" width="0.1085%" height="15" fill="rgb(242,79,21)"/><text x="1.8673%" y="767.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (10 samples, 0.11%)</title><rect x="1.6173%" y="741" width="0.1085%" height="15" fill="rgb(211,96,35)"/><text x="1.8673%" y="751.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.11%)</title><rect x="1.6173%" y="725" width="0.1085%" height="15" fill="rgb(253,215,40)"/><text x="1.8673%" y="735.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.11%)</title><rect x="1.6173%" y="709" width="0.1085%" height="15" fill="rgb(211,81,21)"/><text x="1.8673%" y="719.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (10 samples, 0.11%)</title><rect x="1.6173%" y="693" width="0.1085%" height="15" fill="rgb(208,190,38)"/><text x="1.8673%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.11%)</title><rect x="1.6173%" y="677" width="0.1085%" height="15" fill="rgb(235,213,38)"/><text x="1.8673%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.11%)</title><rect x="1.6173%" y="661" width="0.1085%" height="15" fill="rgb(237,122,38)"/><text x="1.8673%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.11%)</title><rect x="1.6173%" y="645" width="0.1085%" height="15" fill="rgb(244,218,35)"/><text x="1.8673%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.11%)</title><rect x="1.6173%" y="629" width="0.1085%" height="15" fill="rgb(240,68,47)"/><text x="1.8673%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (10 samples, 0.11%)</title><rect x="1.6173%" y="613" width="0.1085%" height="15" fill="rgb(210,16,53)"/><text x="1.8673%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10 samples, 0.11%)</title><rect x="1.6173%" y="597" width="0.1085%" height="15" fill="rgb(235,124,12)"/><text x="1.8673%" y="607.50"></text></g><g><title>__GI___libc_free (53 samples, 0.58%)</title><rect x="1.8669%" y="629" width="0.5753%" height="15" fill="rgb(224,169,11)"/><text x="2.1169%" y="639.50"></text></g><g><title>_int_free (52 samples, 0.56%)</title><rect x="1.8778%" y="613" width="0.5644%" height="15" fill="rgb(250,166,2)"/><text x="2.1278%" y="623.50"></text></g><g><title>malloc_consolidate (51 samples, 0.55%)</title><rect x="1.8886%" y="597" width="0.5536%" height="15" fill="rgb(242,216,29)"/><text x="2.1386%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (55 samples, 0.60%)</title><rect x="2.4422%" y="629" width="0.5970%" height="15" fill="rgb(230,116,27)"/><text x="2.6922%" y="639.50"></text></g><g><title>__GI___libc_free (41 samples, 0.45%)</title><rect x="2.5942%" y="613" width="0.4450%" height="15" fill="rgb(228,99,48)"/><text x="2.8442%" y="623.50"></text></g><g><title>_int_free (41 samples, 0.45%)</title><rect x="2.5942%" y="597" width="0.4450%" height="15" fill="rgb(253,11,6)"/><text x="2.8442%" y="607.50"></text></g><g><title>malloc_consolidate (40 samples, 0.43%)</title><rect x="2.6050%" y="581" width="0.4342%" height="15" fill="rgb(247,143,39)"/><text x="2.8550%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.14%)</title><rect x="6.4040%" y="549" width="0.1411%" height="15" fill="rgb(236,97,10)"/><text x="6.6540%" y="559.50"></text></g><g><title>__GI___libc_free (31 samples, 0.34%)</title><rect x="6.5451%" y="549" width="0.3365%" height="15" fill="rgb(233,208,19)"/><text x="6.7951%" y="559.50"></text></g><g><title>_int_free (24 samples, 0.26%)</title><rect x="6.6211%" y="533" width="0.2605%" height="15" fill="rgb(216,164,2)"/><text x="6.8711%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (57 samples, 0.62%)</title><rect x="6.8816%" y="549" width="0.6187%" height="15" fill="rgb(220,129,5)"/><text x="7.1316%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (205 samples, 2.23%)</title><rect x="5.5248%" y="565" width="2.2251%" height="15" fill="rgb(242,17,10)"/><text x="5.7748%" y="575.50">&lt;..</text></g><g><title>core::ptr::drop_in_place (21 samples, 0.23%)</title><rect x="7.5220%" y="549" width="0.2279%" height="15" fill="rgb(242,107,0)"/><text x="7.7720%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.18%)</title><rect x="7.5654%" y="533" width="0.1845%" height="15" fill="rgb(251,28,31)"/><text x="7.8154%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.13%)</title><rect x="7.6197%" y="517" width="0.1303%" height="15" fill="rgb(233,223,10)"/><text x="7.8697%" y="527.50"></text></g><g><title>__GI___libc_free (530 samples, 5.75%)</title><rect x="7.7499%" y="565" width="5.7527%" height="15" fill="rgb(215,21,27)"/><text x="7.9999%" y="575.50">__GI___..</text></g><g><title>_int_free (513 samples, 5.57%)</title><rect x="7.9344%" y="549" width="5.5682%" height="15" fill="rgb(232,23,21)"/><text x="8.1844%" y="559.50">_int_fr..</text></g><g><title>malloc_consolidate (467 samples, 5.07%)</title><rect x="8.4337%" y="533" width="5.0689%" height="15" fill="rgb(244,5,23)"/><text x="8.6837%" y="543.50">malloc..</text></g><g><title>alloc::collections::btree::navigate::full_range (59 samples, 0.64%)</title><rect x="13.5244%" y="565" width="0.6404%" height="15" fill="rgb(226,81,46)"/><text x="13.7744%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::next_kv_unchecked_dealloc (72 samples, 0.78%)</title><rect x="14.1648%" y="565" width="0.7815%" height="15" fill="rgb(247,70,30)"/><text x="14.4148%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.11%)</title><rect x="15.6301%" y="517" width="0.1085%" height="15" fill="rgb(212,68,19)"/><text x="15.8801%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (13 samples, 0.14%)</title><rect x="15.8038%" y="517" width="0.1411%" height="15" fill="rgb(240,187,13)"/><text x="16.0538%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1,167 samples, 12.67%)</title><rect x="3.5059%" y="581" width="12.6669%" height="15" fill="rgb(223,113,26)"/><text x="3.7559%" y="591.50">&lt;alloc::collections..</text></g><g><title>core::ptr::drop_in_place (113 samples, 1.23%)</title><rect x="14.9463%" y="565" width="1.2265%" height="15" fill="rgb(206,192,2)"/><text x="15.1963%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 1.19%)</title><rect x="14.9788%" y="549" width="1.1940%" height="15" fill="rgb(241,108,4)"/><text x="15.2288%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.89%)</title><rect x="15.2828%" y="533" width="0.8900%" height="15" fill="rgb(247,173,49)"/><text x="15.5328%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (16 samples, 0.17%)</title><rect x="15.9991%" y="517" width="0.1737%" height="15" fill="rgb(224,114,35)"/><text x="16.2491%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.15%)</title><rect x="16.0208%" y="501" width="0.1520%" height="15" fill="rgb(245,159,27)"/><text x="16.2708%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,188 samples, 12.89%)</title><rect x="3.4408%" y="597" width="12.8948%" height="15" fill="rgb(245,172,44)"/><text x="3.6908%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt;..</text></g><g><title>__GI___libc_free (15 samples, 0.16%)</title><rect x="16.1728%" y="581" width="0.1628%" height="15" fill="rgb(236,23,11)"/><text x="16.4228%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1,343 samples, 14.58%)</title><rect x="1.7692%" y="645" width="14.5772%" height="15" fill="rgb(205,117,38)"/><text x="2.0192%" y="655.50">&lt;alloc::collections::b..</text></g><g><title>core::ptr::drop_in_place (1,226 samples, 13.31%)</title><rect x="3.0392%" y="629" width="13.3073%" height="15" fill="rgb(237,72,25)"/><text x="3.2892%" y="639.50">core::ptr::drop_in_p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,226 samples, 13.31%)</title><rect x="3.0392%" y="613" width="13.3073%" height="15" fill="rgb(244,70,9)"/><text x="3.2892%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.46%)</title><rect x="16.8675%" y="501" width="0.4559%" height="15" fill="rgb(217,125,39)"/><text x="17.1175%" y="511.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.31%)</title><rect x="17.0086%" y="485" width="0.3148%" height="15" fill="rgb(235,36,10)"/><text x="17.2586%" y="495.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (17 samples, 0.18%)</title><rect x="17.1388%" y="469" width="0.1845%" height="15" fill="rgb(251,123,47)"/><text x="17.3888%" y="479.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (77 samples, 0.84%)</title><rect x="16.5418%" y="517" width="0.8358%" height="15" fill="rgb(221,13,13)"/><text x="16.7918%" y="527.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.12%)</title><rect x="17.3776%" y="517" width="0.1194%" height="15" fill="rgb(238,131,9)"/><text x="17.6276%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (100 samples, 1.09%)</title><rect x="16.4224%" y="549" width="1.0854%" height="15" fill="rgb(211,50,8)"/><text x="16.6724%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (93 samples, 1.01%)</title><rect x="16.4984%" y="533" width="1.0094%" height="15" fill="rgb(245,182,24)"/><text x="16.7484%" y="543.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.14%)</title><rect x="17.6924%" y="501" width="0.1411%" height="15" fill="rgb(242,14,37)"/><text x="17.9424%" y="511.50"></text></g><g><title>_int_malloc (13 samples, 0.14%)</title><rect x="17.6924%" y="485" width="0.1411%" height="15" fill="rgb(246,228,12)"/><text x="17.9424%" y="495.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="17.7141%" y="469" width="0.1194%" height="15" fill="rgb(213,55,15)"/><text x="17.9641%" y="479.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="17.7141%" y="453" width="0.1194%" height="15" fill="rgb(209,9,3)"/><text x="17.9641%" y="463.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="17.7141%" y="437" width="0.1194%" height="15" fill="rgb(230,59,30)"/><text x="17.9641%" y="447.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="17.7141%" y="421" width="0.1194%" height="15" fill="rgb(209,121,21)"/><text x="17.9641%" y="431.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="17.7141%" y="405" width="0.1194%" height="15" fill="rgb(220,109,13)"/><text x="17.9641%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.20%)</title><rect x="17.6924%" y="517" width="0.1954%" height="15" fill="rgb(232,18,1)"/><text x="17.9424%" y="527.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.24%)</title><rect x="18.2242%" y="485" width="0.2388%" height="15" fill="rgb(215,41,42)"/><text x="18.4742%" y="495.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (14 samples, 0.15%)</title><rect x="18.3111%" y="469" width="0.1520%" height="15" fill="rgb(224,123,36)"/><text x="18.5611%" y="479.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.33%)</title><rect x="18.1591%" y="501" width="0.3256%" height="15" fill="rgb(240,125,3)"/><text x="18.4091%" y="511.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="18.5933%" y="453" width="0.1085%" height="15" fill="rgb(205,98,50)"/><text x="18.8433%" y="463.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="18.5933%" y="437" width="0.1085%" height="15" fill="rgb(205,185,37)"/><text x="18.8433%" y="447.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="18.5933%" y="421" width="0.1085%" height="15" fill="rgb(238,207,15)"/><text x="18.8433%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="18.5933%" y="405" width="0.1085%" height="15" fill="rgb(213,199,42)"/><text x="18.8433%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="18.5933%" y="389" width="0.1085%" height="15" fill="rgb(235,201,11)"/><text x="18.8433%" y="399.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="18.5933%" y="373" width="0.1085%" height="15" fill="rgb(207,46,11)"/><text x="18.8433%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.23%)</title><rect x="18.4847%" y="501" width="0.2279%" height="15" fill="rgb(241,35,35)"/><text x="18.7347%" y="511.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.23%)</title><rect x="18.4847%" y="485" width="0.2279%" height="15" fill="rgb(243,32,47)"/><text x="18.7347%" y="495.50"></text></g><g><title>_int_malloc (17 samples, 0.18%)</title><rect x="18.5282%" y="469" width="0.1845%" height="15" fill="rgb(247,202,23)"/><text x="18.7782%" y="479.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.87%)</title><rect x="19.8415%" y="469" width="0.8683%" height="15" fill="rgb(219,102,11)"/><text x="20.0915%" y="479.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.50%)</title><rect x="20.2106%" y="453" width="0.4993%" height="15" fill="rgb(243,110,44)"/><text x="20.4606%" y="463.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (27 samples, 0.29%)</title><rect x="20.4168%" y="437" width="0.2931%" height="15" fill="rgb(222,74,54)"/><text x="20.6668%" y="447.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (181 samples, 1.96%)</title><rect x="18.9189%" y="485" width="1.9646%" height="15" fill="rgb(216,99,12)"/><text x="19.1689%" y="495.50">&lt;..</text></g><g><title>core::str::converts::from_utf8 (16 samples, 0.17%)</title><rect x="20.7099%" y="469" width="0.1737%" height="15" fill="rgb(226,22,26)"/><text x="20.9599%" y="479.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 1.40%)</title><rect x="23.5754%" y="453" width="1.4002%" height="15" fill="rgb(217,163,10)"/><text x="23.8254%" y="463.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (83 samples, 0.90%)</title><rect x="24.0747%" y="437" width="0.9009%" height="15" fill="rgb(213,25,53)"/><text x="24.3247%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (49 samples, 0.53%)</title><rect x="24.4437%" y="421" width="0.5319%" height="15" fill="rgb(252,105,26)"/><text x="24.6937%" y="431.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.38%)</title><rect x="25.1818%" y="421" width="0.3799%" height="15" fill="rgb(220,39,43)"/><text x="25.4318%" y="431.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.27%)</title><rect x="25.2904%" y="405" width="0.2714%" height="15" fill="rgb(229,68,48)"/><text x="25.5404%" y="415.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (16 samples, 0.17%)</title><rect x="25.3880%" y="389" width="0.1737%" height="15" fill="rgb(252,8,32)"/><text x="25.6380%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (59 samples, 0.64%)</title><rect x="24.9756%" y="437" width="0.6404%" height="15" fill="rgb(223,20,43)"/><text x="25.2256%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (73 samples, 0.79%)</title><rect x="24.9756%" y="453" width="0.7924%" height="15" fill="rgb(229,81,49)"/><text x="25.2256%" y="463.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (461 samples, 5.00%)</title><rect x="30.1422%" y="421" width="5.0038%" height="15" fill="rgb(236,28,36)"/><text x="30.3922%" y="431.50">&lt;serde..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (321 samples, 3.48%)</title><rect x="31.6618%" y="405" width="3.4842%" height="15" fill="rgb(249,185,26)"/><text x="31.9118%" y="415.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (205 samples, 2.23%)</title><rect x="32.9209%" y="389" width="2.2251%" height="15" fill="rgb(249,174,33)"/><text x="33.1709%" y="399.50">&lt;..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (16 samples, 0.17%)</title><rect x="34.9723%" y="373" width="0.1737%" height="15" fill="rgb(233,201,37)"/><text x="35.2223%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::read (16 samples, 0.17%)</title><rect x="34.9723%" y="357" width="0.1737%" height="15" fill="rgb(221,78,26)"/><text x="35.2223%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (16 samples, 0.17%)</title><rect x="34.9723%" y="341" width="0.1737%" height="15" fill="rgb(250,127,30)"/><text x="35.2223%" y="351.50"></text></g><g><title>__GI___libc_read (16 samples, 0.17%)</title><rect x="34.9723%" y="325" width="0.1737%" height="15" fill="rgb(230,49,44)"/><text x="35.2223%" y="335.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="34.9723%" y="309" width="0.1737%" height="15" fill="rgb(229,67,23)"/><text x="35.2223%" y="319.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="34.9723%" y="293" width="0.1737%" height="15" fill="rgb(249,83,47)"/><text x="35.2223%" y="303.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="34.9723%" y="277" width="0.1737%" height="15" fill="rgb(215,43,3)"/><text x="35.2223%" y="287.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="34.9723%" y="261" width="0.1737%" height="15" fill="rgb(238,154,13)"/><text x="35.2223%" y="271.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="34.9723%" y="245" width="0.1737%" height="15" fill="rgb(219,56,2)"/><text x="35.2223%" y="255.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="34.9723%" y="229" width="0.1737%" height="15" fill="rgb(233,0,4)"/><text x="35.2223%" y="239.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="34.9832%" y="213" width="0.1628%" height="15" fill="rgb(235,30,7)"/><text x="35.2332%" y="223.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="34.9832%" y="197" width="0.1628%" height="15" fill="rgb(250,79,13)"/><text x="35.2332%" y="207.50"></text></g><g><title>[unknown] (14 samples, 0.15%)</title><rect x="34.9940%" y="181" width="0.1520%" height="15" fill="rgb(211,146,34)"/><text x="35.2440%" y="191.50"></text></g><g><title>[unknown] (14 samples, 0.15%)</title><rect x="34.9940%" y="165" width="0.1520%" height="15" fill="rgb(228,22,38)"/><text x="35.2440%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.15%)</title><rect x="34.9940%" y="149" width="0.1520%" height="15" fill="rgb(235,168,5)"/><text x="35.2440%" y="159.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (937 samples, 10.17%)</title><rect x="26.0067%" y="437" width="10.1704%" height="15" fill="rgb(221,155,16)"/><text x="26.2567%" y="447.50">&lt;serde_json::re..</text></g><g><title>core::str::converts::from_utf8 (94 samples, 1.02%)</title><rect x="35.1568%" y="421" width="1.0203%" height="15" fill="rgb(215,215,53)"/><text x="35.4068%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (37 samples, 0.40%)</title><rect x="35.7755%" y="405" width="0.4016%" height="15" fill="rgb(223,4,10)"/><text x="36.0255%" y="415.50"></text></g><g><title>[unknown] (34 samples, 0.37%)</title><rect x="37.5882%" y="405" width="0.3690%" height="15" fill="rgb(234,103,6)"/><text x="37.8382%" y="415.50"></text></g><g><title>[unknown] (34 samples, 0.37%)</title><rect x="37.5882%" y="389" width="0.3690%" height="15" fill="rgb(227,97,0)"/><text x="37.8382%" y="399.50"></text></g><g><title>[unknown] (34 samples, 0.37%)</title><rect x="37.5882%" y="373" width="0.3690%" height="15" fill="rgb(234,150,53)"/><text x="37.8382%" y="383.50"></text></g><g><title>[unknown] (34 samples, 0.37%)</title><rect x="37.5882%" y="357" width="0.3690%" height="15" fill="rgb(228,201,54)"/><text x="37.8382%" y="367.50"></text></g><g><title>[unknown] (33 samples, 0.36%)</title><rect x="37.5990%" y="341" width="0.3582%" height="15" fill="rgb(222,22,37)"/><text x="37.8490%" y="351.50"></text></g><g><title>[unknown] (29 samples, 0.31%)</title><rect x="37.6425%" y="325" width="0.3148%" height="15" fill="rgb(237,53,32)"/><text x="37.8925%" y="335.50"></text></g><g><title>[unknown] (27 samples, 0.29%)</title><rect x="37.6642%" y="309" width="0.2931%" height="15" fill="rgb(233,25,53)"/><text x="37.9142%" y="319.50"></text></g><g><title>[unknown] (25 samples, 0.27%)</title><rect x="37.6859%" y="293" width="0.2714%" height="15" fill="rgb(210,40,34)"/><text x="37.9359%" y="303.50"></text></g><g><title>[unknown] (18 samples, 0.20%)</title><rect x="37.7619%" y="277" width="0.1954%" height="15" fill="rgb(241,220,44)"/><text x="38.0119%" y="287.50"></text></g><g><title>[unknown] (16 samples, 0.17%)</title><rect x="37.7836%" y="261" width="0.1737%" height="15" fill="rgb(235,28,35)"/><text x="38.0336%" y="271.50"></text></g><g><title>__GI___libc_malloc (168 samples, 1.82%)</title><rect x="36.1771%" y="437" width="1.8235%" height="15" fill="rgb(210,56,17)"/><text x="36.4271%" y="447.50">_..</text></g><g><title>_int_malloc (151 samples, 1.64%)</title><rect x="36.3617%" y="421" width="1.6390%" height="15" fill="rgb(224,130,29)"/><text x="36.6117%" y="431.50"></text></g><g><title>__memcpy_ssse3 (68 samples, 0.74%)</title><rect x="38.0007%" y="437" width="0.7381%" height="15" fill="rgb(235,212,8)"/><text x="38.2507%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1,471 samples, 15.97%)</title><rect x="22.9133%" y="469" width="15.9666%" height="15" fill="rgb(223,33,50)"/><text x="23.1633%" y="479.50">&lt;serde_json::de::MapAcces..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1,208 samples, 13.11%)</title><rect x="25.7679%" y="453" width="13.1119%" height="15" fill="rgb(219,149,13)"/><text x="26.0179%" y="463.50">serde::de::impls::&lt;i..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.12%)</title><rect x="38.7604%" y="437" width="0.1194%" height="15" fill="rgb(250,156,29)"/><text x="39.0104%" y="447.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.26%)</title><rect x="39.0318%" y="453" width="0.2605%" height="15" fill="rgb(216,193,19)"/><text x="39.2818%" y="463.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.18%)</title><rect x="39.1078%" y="437" width="0.1845%" height="15" fill="rgb(216,135,14)"/><text x="39.3578%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (12 samples, 0.13%)</title><rect x="39.1621%" y="421" width="0.1303%" height="15" fill="rgb(241,47,5)"/><text x="39.4121%" y="431.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 1.45%)</title><rect x="41.4197%" y="421" width="1.4545%" height="15" fill="rgb(233,42,35)"/><text x="41.6697%" y="431.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (80 samples, 0.87%)</title><rect x="42.0059%" y="405" width="0.8683%" height="15" fill="rgb(231,13,6)"/><text x="42.2559%" y="415.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 2.17%)</title><rect x="40.7251%" y="437" width="2.1708%" height="15" fill="rgb(207,181,40)"/><text x="40.9751%" y="447.50">&lt;..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (340 samples, 3.69%)</title><rect x="45.5769%" y="421" width="3.6904%" height="15" fill="rgb(254,173,49)"/><text x="45.8269%" y="431.50">&lt;ser..</text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 2.52%)</title><rect x="46.7492%" y="405" width="2.5182%" height="15" fill="rgb(221,1,38)"/><text x="46.9992%" y="415.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (152 samples, 1.65%)</title><rect x="47.6175%" y="389" width="1.6498%" height="15" fill="rgb(206,124,46)"/><text x="47.8675%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (621 samples, 6.74%)</title><rect x="42.8959%" y="437" width="6.7405%" height="15" fill="rgb(249,21,11)"/><text x="43.1459%" y="447.50">&lt;serde_js..</text></g><g><title>core::str::converts::from_utf8 (34 samples, 0.37%)</title><rect x="49.2673%" y="421" width="0.3690%" height="15" fill="rgb(222,201,40)"/><text x="49.5173%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (26 samples, 0.28%)</title><rect x="49.3542%" y="405" width="0.2822%" height="15" fill="rgb(235,61,29)"/><text x="49.6042%" y="415.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.20%)</title><rect x="50.7327%" y="389" width="0.1954%" height="15" fill="rgb(219,207,3)"/><text x="50.9827%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.29%)</title><rect x="50.6458%" y="405" width="0.2931%" height="15" fill="rgb(222,56,46)"/><text x="50.8958%" y="415.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.49%)</title><rect x="51.4599%" y="373" width="0.4884%" height="15" fill="rgb(239,76,54)"/><text x="51.7099%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.38%)</title><rect x="51.5684%" y="357" width="0.3799%" height="15" fill="rgb(231,124,27)"/><text x="51.8184%" y="367.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (18 samples, 0.20%)</title><rect x="51.7530%" y="341" width="0.1954%" height="15" fill="rgb(249,195,6)"/><text x="52.0030%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (103 samples, 1.12%)</title><rect x="50.9606%" y="389" width="1.1180%" height="15" fill="rgb(237,174,47)"/><text x="51.2106%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (12 samples, 0.13%)</title><rect x="51.9483%" y="373" width="0.1303%" height="15" fill="rgb(206,201,31)"/><text x="52.1983%" y="383.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.17%)</title><rect x="52.0786%" y="389" width="0.1737%" height="15" fill="rgb(231,57,52)"/><text x="52.3286%" y="399.50"></text></g><g><title>_int_malloc (11 samples, 0.12%)</title><rect x="52.1329%" y="373" width="0.1194%" height="15" fill="rgb(248,177,22)"/><text x="52.3829%" y="383.50"></text></g><g><title>__memcpy_ssse3 (11 samples, 0.12%)</title><rect x="52.2523%" y="389" width="0.1194%" height="15" fill="rgb(215,211,37)"/><text x="52.5023%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (133 samples, 1.44%)</title><rect x="50.9389%" y="405" width="1.4436%" height="15" fill="rgb(241,128,51)"/><text x="51.1889%" y="415.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.61%)</title><rect x="53.1206%" y="373" width="0.6078%" height="15" fill="rgb(227,165,31)"/><text x="53.3706%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.40%)</title><rect x="53.3268%" y="357" width="0.4016%" height="15" fill="rgb(228,167,24)"/><text x="53.5768%" y="367.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (18 samples, 0.20%)</title><rect x="53.5331%" y="341" width="0.1954%" height="15" fill="rgb(228,143,12)"/><text x="53.7831%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (138 samples, 1.50%)</title><rect x="52.4693%" y="389" width="1.4979%" height="15" fill="rgb(249,149,8)"/><text x="52.7193%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (22 samples, 0.24%)</title><rect x="53.7284%" y="373" width="0.2388%" height="15" fill="rgb(243,35,44)"/><text x="53.9784%" y="383.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.33%)</title><rect x="53.9672%" y="389" width="0.3256%" height="15" fill="rgb(246,89,9)"/><text x="54.2172%" y="399.50"></text></g><g><title>_int_malloc (27 samples, 0.29%)</title><rect x="53.9998%" y="373" width="0.2931%" height="15" fill="rgb(233,213,13)"/><text x="54.2498%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (381 samples, 4.14%)</title><rect x="50.2768%" y="421" width="4.1355%" height="15" fill="rgb(233,141,41)"/><text x="50.5268%" y="431.50">&lt;serd..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (187 samples, 2.03%)</title><rect x="52.3825%" y="405" width="2.0297%" height="15" fill="rgb(239,167,4)"/><text x="52.6325%" y="415.50">s..</text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.30%)</title><rect x="54.9984%" y="389" width="0.3039%" height="15" fill="rgb(209,217,16)"/><text x="55.2484%" y="399.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.23%)</title><rect x="55.0744%" y="373" width="0.2279%" height="15" fill="rgb(219,88,35)"/><text x="55.3244%" y="383.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (16 samples, 0.17%)</title><rect x="55.1286%" y="357" width="0.1737%" height="15" fill="rgb(220,193,23)"/><text x="55.3786%" y="367.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.56%)</title><rect x="55.5411%" y="373" width="0.5644%" height="15" fill="rgb(230,90,52)"/><text x="55.7911%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.40%)</title><rect x="55.7039%" y="357" width="0.4016%" height="15" fill="rgb(252,106,19)"/><text x="55.9539%" y="367.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (23 samples, 0.25%)</title><rect x="55.8559%" y="341" width="0.2496%" height="15" fill="rgb(206,74,20)"/><text x="56.1059%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (85 samples, 0.92%)</title><rect x="55.3023%" y="389" width="0.9226%" height="15" fill="rgb(230,138,44)"/><text x="55.5523%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (11 samples, 0.12%)</title><rect x="56.1055%" y="373" width="0.1194%" height="15" fill="rgb(235,182,43)"/><text x="56.3555%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (22 samples, 0.24%)</title><rect x="56.2575%" y="373" width="0.2388%" height="15" fill="rgb(242,16,51)"/><text x="56.5075%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (16 samples, 0.17%)</title><rect x="56.4963%" y="373" width="0.1737%" height="15" fill="rgb(248,9,4)"/><text x="56.7463%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (15 samples, 0.16%)</title><rect x="56.5071%" y="357" width="0.1628%" height="15" fill="rgb(210,31,22)"/><text x="56.7571%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (53 samples, 0.58%)</title><rect x="56.2249%" y="389" width="0.5753%" height="15" fill="rgb(239,54,39)"/><text x="56.4749%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (12 samples, 0.13%)</title><rect x="56.6699%" y="373" width="0.1303%" height="15" fill="rgb(230,99,41)"/><text x="56.9199%" y="383.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.16%)</title><rect x="56.8002%" y="389" width="0.1628%" height="15" fill="rgb(253,106,12)"/><text x="57.0502%" y="399.50"></text></g><g><title>_int_malloc (12 samples, 0.13%)</title><rect x="56.8327%" y="373" width="0.1303%" height="15" fill="rgb(213,46,41)"/><text x="57.0827%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (14 samples, 0.15%)</title><rect x="57.1258%" y="389" width="0.1520%" height="15" fill="rgb(215,133,35)"/><text x="57.3758%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.12%)</title><rect x="57.1584%" y="373" width="0.1194%" height="15" fill="rgb(213,28,5)"/><text x="57.4084%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (14 samples, 0.15%)</title><rect x="57.3863%" y="357" width="0.1520%" height="15" fill="rgb(215,77,49)"/><text x="57.6363%" y="367.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.17%)</title><rect x="57.6359%" y="341" width="0.1737%" height="15" fill="rgb(248,100,22)"/><text x="57.8859%" y="351.50"></text></g><g><title>_int_malloc (16 samples, 0.17%)</title><rect x="57.6359%" y="325" width="0.1737%" height="15" fill="rgb(208,67,9)"/><text x="57.8859%" y="335.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="57.6794%" y="309" width="0.1303%" height="15" fill="rgb(219,133,21)"/><text x="57.9294%" y="319.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="57.6794%" y="293" width="0.1303%" height="15" fill="rgb(246,46,29)"/><text x="57.9294%" y="303.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="57.6794%" y="277" width="0.1303%" height="15" fill="rgb(246,185,52)"/><text x="57.9294%" y="287.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="57.6794%" y="261" width="0.1303%" height="15" fill="rgb(252,136,11)"/><text x="57.9294%" y="271.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="57.6794%" y="245" width="0.1303%" height="15" fill="rgb(219,138,53)"/><text x="57.9294%" y="255.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="57.6794%" y="229" width="0.1303%" height="15" fill="rgb(211,51,23)"/><text x="57.9294%" y="239.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="57.6902%" y="213" width="0.1194%" height="15" fill="rgb(247,221,28)"/><text x="57.9402%" y="223.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="57.7011%" y="197" width="0.1085%" height="15" fill="rgb(251,222,45)"/><text x="57.9511%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (50 samples, 0.54%)</title><rect x="57.3103%" y="373" width="0.5427%" height="15" fill="rgb(217,162,53)"/><text x="57.5603%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (21 samples, 0.23%)</title><rect x="57.6251%" y="357" width="0.2279%" height="15" fill="rgb(229,93,14)"/><text x="57.8751%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (331 samples, 3.59%)</title><rect x="54.4122%" y="421" width="3.5927%" height="15" fill="rgb(209,67,49)"/><text x="54.6622%" y="431.50">&lt;ser..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (317 samples, 3.44%)</title><rect x="54.5642%" y="405" width="3.4408%" height="15" fill="rgb(213,87,29)"/><text x="54.8142%" y="415.50">ser..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (67 samples, 0.73%)</title><rect x="57.2778%" y="389" width="0.7272%" height="15" fill="rgb(205,151,52)"/><text x="57.5278%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (14 samples, 0.15%)</title><rect x="57.8530%" y="373" width="0.1520%" height="15" fill="rgb(253,215,39)"/><text x="58.1030%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (12 samples, 0.13%)</title><rect x="57.8747%" y="357" width="0.1303%" height="15" fill="rgb(221,220,41)"/><text x="58.1247%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (12 samples, 0.13%)</title><rect x="57.8747%" y="341" width="0.1303%" height="15" fill="rgb(218,133,21)"/><text x="58.1247%" y="351.50"></text></g><g><title>[unknown] (94 samples, 1.02%)</title><rect x="58.3740%" y="373" width="1.0203%" height="15" fill="rgb(221,193,43)"/><text x="58.6240%" y="383.50"></text></g><g><title>[unknown] (87 samples, 0.94%)</title><rect x="58.4500%" y="357" width="0.9443%" height="15" fill="rgb(240,128,52)"/><text x="58.7000%" y="367.50"></text></g><g><title>[unknown] (85 samples, 0.92%)</title><rect x="58.4717%" y="341" width="0.9226%" height="15" fill="rgb(253,114,12)"/><text x="58.7217%" y="351.50"></text></g><g><title>[unknown] (83 samples, 0.90%)</title><rect x="58.4934%" y="325" width="0.9009%" height="15" fill="rgb(215,223,47)"/><text x="58.7434%" y="335.50"></text></g><g><title>[unknown] (82 samples, 0.89%)</title><rect x="58.5043%" y="309" width="0.8900%" height="15" fill="rgb(248,225,23)"/><text x="58.7543%" y="319.50"></text></g><g><title>[unknown] (78 samples, 0.85%)</title><rect x="58.5477%" y="293" width="0.8466%" height="15" fill="rgb(250,108,0)"/><text x="58.7977%" y="303.50"></text></g><g><title>[unknown] (70 samples, 0.76%)</title><rect x="58.6345%" y="277" width="0.7598%" height="15" fill="rgb(228,208,7)"/><text x="58.8845%" y="287.50"></text></g><g><title>[unknown] (65 samples, 0.71%)</title><rect x="58.6888%" y="261" width="0.7055%" height="15" fill="rgb(244,45,10)"/><text x="58.9388%" y="271.50"></text></g><g><title>[unknown] (56 samples, 0.61%)</title><rect x="58.7865%" y="245" width="0.6078%" height="15" fill="rgb(207,125,25)"/><text x="59.0365%" y="255.50"></text></g><g><title>[unknown] (50 samples, 0.54%)</title><rect x="58.8516%" y="229" width="0.5427%" height="15" fill="rgb(210,195,18)"/><text x="59.1016%" y="239.50"></text></g><g><title>__GI___libc_malloc (120 samples, 1.30%)</title><rect x="58.1570%" y="405" width="1.3025%" height="15" fill="rgb(249,80,12)"/><text x="58.4070%" y="415.50"></text></g><g><title>_int_malloc (118 samples, 1.28%)</title><rect x="58.1787%" y="389" width="1.2808%" height="15" fill="rgb(221,65,9)"/><text x="58.4287%" y="399.50"></text></g><g><title>__memcpy_ssse3 (25 samples, 0.27%)</title><rect x="59.5137%" y="405" width="0.2714%" height="15" fill="rgb(235,49,36)"/><text x="59.7637%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (956 samples, 10.38%)</title><rect x="49.6364%" y="437" width="10.3766%" height="15" fill="rgb(225,32,20)"/><text x="49.8864%" y="447.50">&lt;serde_json::va..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (185 samples, 2.01%)</title><rect x="58.0050%" y="421" width="2.0080%" height="15" fill="rgb(215,141,46)"/><text x="58.2550%" y="431.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (18 samples, 0.20%)</title><rect x="59.8176%" y="405" width="0.1954%" height="15" fill="rgb(250,160,47)"/><text x="60.0676%" y="415.50"></text></g><g><title>[unknown] (13 samples, 0.14%)</title><rect x="60.2952%" y="405" width="0.1411%" height="15" fill="rgb(216,222,40)"/><text x="60.5452%" y="415.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="60.3061%" y="389" width="0.1303%" height="15" fill="rgb(234,217,39)"/><text x="60.5561%" y="399.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="60.3061%" y="373" width="0.1303%" height="15" fill="rgb(207,178,40)"/><text x="60.5561%" y="383.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="60.3061%" y="357" width="0.1303%" height="15" fill="rgb(221,136,13)"/><text x="60.5561%" y="367.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="60.3061%" y="341" width="0.1303%" height="15" fill="rgb(249,199,10)"/><text x="60.5561%" y="351.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="60.3169%" y="325" width="0.1194%" height="15" fill="rgb(249,222,13)"/><text x="60.5669%" y="335.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="60.3169%" y="309" width="0.1194%" height="15" fill="rgb(244,185,38)"/><text x="60.5669%" y="319.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="60.3169%" y="293" width="0.1194%" height="15" fill="rgb(236,202,9)"/><text x="60.5669%" y="303.50"></text></g><g><title>__GI___libc_malloc (40 samples, 0.43%)</title><rect x="60.0130%" y="437" width="0.4342%" height="15" fill="rgb(250,229,37)"/><text x="60.2630%" y="447.50"></text></g><g><title>_int_malloc (34 samples, 0.37%)</title><rect x="60.0782%" y="421" width="0.3690%" height="15" fill="rgb(206,174,23)"/><text x="60.3282%" y="431.50"></text></g><g><title>__memcpy_ssse3 (24 samples, 0.26%)</title><rect x="60.4472%" y="437" width="0.2605%" height="15" fill="rgb(211,33,43)"/><text x="60.6972%" y="447.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="60.7837%" y="389" width="0.1628%" height="15" fill="rgb(245,58,50)"/><text x="61.0337%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="60.7837%" y="373" width="0.1628%" height="15" fill="rgb(244,68,36)"/><text x="61.0337%" y="383.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="60.7837%" y="357" width="0.1628%" height="15" fill="rgb(232,229,15)"/><text x="61.0337%" y="367.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="60.7837%" y="341" width="0.1628%" height="15" fill="rgb(254,30,23)"/><text x="61.0337%" y="351.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="60.7837%" y="325" width="0.1628%" height="15" fill="rgb(235,160,14)"/><text x="61.0337%" y="335.50"></text></g><g><title>[unknown] (15 samples, 0.16%)</title><rect x="60.7837%" y="309" width="0.1628%" height="15" fill="rgb(212,155,44)"/><text x="61.0337%" y="319.50"></text></g><g><title>[unknown] (14 samples, 0.15%)</title><rect x="60.7945%" y="293" width="0.1520%" height="15" fill="rgb(226,2,50)"/><text x="61.0445%" y="303.50"></text></g><g><title>[unknown] (14 samples, 0.15%)</title><rect x="60.7945%" y="277" width="0.1520%" height="15" fill="rgb(234,177,6)"/><text x="61.0445%" y="287.50"></text></g><g><title>[unknown] (12 samples, 0.13%)</title><rect x="60.8162%" y="261" width="0.1303%" height="15" fill="rgb(217,24,9)"/><text x="61.0662%" y="271.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="60.8271%" y="245" width="0.1194%" height="15" fill="rgb(220,13,46)"/><text x="61.0771%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.26%)</title><rect x="60.7185%" y="437" width="0.2605%" height="15" fill="rgb(239,221,27)"/><text x="60.9685%" y="447.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.23%)</title><rect x="60.7511%" y="421" width="0.2279%" height="15" fill="rgb(222,198,25)"/><text x="61.0011%" y="431.50"></text></g><g><title>_int_malloc (21 samples, 0.23%)</title><rect x="60.7511%" y="405" width="0.2279%" height="15" fill="rgb(211,99,13)"/><text x="61.0011%" y="415.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.16%)</title><rect x="61.1202%" y="421" width="0.1628%" height="15" fill="rgb(232,111,31)"/><text x="61.3702%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_any_number (30 samples, 0.33%)</title><rect x="60.9791%" y="437" width="0.3256%" height="15" fill="rgb(245,82,37)"/><text x="61.2291%" y="447.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.13%)</title><rect x="61.5652%" y="405" width="0.1303%" height="15" fill="rgb(227,149,46)"/><text x="61.8152%" y="415.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.11%)</title><rect x="61.5869%" y="389" width="0.1085%" height="15" fill="rgb(218,36,50)"/><text x="61.8369%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (28 samples, 0.30%)</title><rect x="61.4132%" y="421" width="0.3039%" height="15" fill="rgb(226,80,48)"/><text x="61.6632%" y="431.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.16%)</title><rect x="62.1187%" y="389" width="0.1628%" height="15" fill="rgb(238,224,15)"/><text x="62.3687%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.15%)</title><rect x="62.5204%" y="357" width="0.1520%" height="15" fill="rgb(241,136,10)"/><text x="62.7704%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.12%)</title><rect x="62.5529%" y="341" width="0.1194%" height="15" fill="rgb(208,32,45)"/><text x="62.8029%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (39 samples, 0.42%)</title><rect x="62.2924%" y="373" width="0.4233%" height="15" fill="rgb(207,135,9)"/><text x="62.5424%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (59 samples, 0.64%)</title><rect x="62.2816%" y="389" width="0.6404%" height="15" fill="rgb(206,86,44)"/><text x="62.5316%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.41%)</title><rect x="63.1499%" y="357" width="0.4125%" height="15" fill="rgb(245,177,15)"/><text x="63.3999%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.36%)</title><rect x="63.2042%" y="341" width="0.3582%" height="15" fill="rgb(206,64,50)"/><text x="63.4542%" y="351.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (31 samples, 0.34%)</title><rect x="63.2259%" y="325" width="0.3365%" height="15" fill="rgb(234,36,40)"/><text x="63.4759%" y="335.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (62 samples, 0.67%)</title><rect x="62.9762%" y="373" width="0.6730%" height="15" fill="rgb(213,64,8)"/><text x="63.2262%" y="383.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.25%)</title><rect x="63.6492%" y="373" width="0.2496%" height="15" fill="rgb(210,75,36)"/><text x="63.8992%" y="383.50"></text></g><g><title>_int_malloc (22 samples, 0.24%)</title><rect x="63.6600%" y="357" width="0.2388%" height="15" fill="rgb(229,88,21)"/><text x="63.9100%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="63.7903%" y="341" width="0.1085%" height="15" fill="rgb(252,204,47)"/><text x="64.0403%" y="351.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="63.7903%" y="325" width="0.1085%" height="15" fill="rgb(208,77,27)"/><text x="64.0403%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="63.7903%" y="309" width="0.1085%" height="15" fill="rgb(221,76,26)"/><text x="64.0403%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="63.7903%" y="293" width="0.1085%" height="15" fill="rgb(225,139,18)"/><text x="64.0403%" y="303.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="63.7903%" y="277" width="0.1085%" height="15" fill="rgb(230,137,11)"/><text x="64.0403%" y="287.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="63.7903%" y="261" width="0.1085%" height="15" fill="rgb(212,28,1)"/><text x="64.0403%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (174 samples, 1.89%)</title><rect x="62.0428%" y="405" width="1.8886%" height="15" fill="rgb(248,164,17)"/><text x="62.2928%" y="415.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (93 samples, 1.01%)</title><rect x="62.9220%" y="389" width="1.0094%" height="15" fill="rgb(222,171,42)"/><text x="63.1720%" y="399.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.28%)</title><rect x="64.0834%" y="373" width="0.2822%" height="15" fill="rgb(243,84,45)"/><text x="64.3334%" y="383.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.25%)</title><rect x="64.1159%" y="357" width="0.2496%" height="15" fill="rgb(252,49,23)"/><text x="64.3659%" y="367.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (20 samples, 0.22%)</title><rect x="64.1485%" y="341" width="0.2171%" height="15" fill="rgb(215,19,7)"/><text x="64.3985%" y="351.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.56%)</title><rect x="64.5935%" y="357" width="0.5644%" height="15" fill="rgb(238,81,41)"/><text x="64.8435%" y="367.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.49%)</title><rect x="64.6695%" y="341" width="0.4884%" height="15" fill="rgb(210,199,37)"/><text x="64.9195%" y="351.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (16 samples, 0.17%)</title><rect x="64.9843%" y="325" width="0.1737%" height="15" fill="rgb(244,192,49)"/><text x="65.2343%" y="335.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (75 samples, 0.81%)</title><rect x="64.3656%" y="373" width="0.8141%" height="15" fill="rgb(226,211,11)"/><text x="64.6156%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (20 samples, 0.22%)</title><rect x="65.2556%" y="357" width="0.2171%" height="15" fill="rgb(236,162,54)"/><text x="65.5056%" y="367.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (10 samples, 0.11%)</title><rect x="65.3642%" y="341" width="0.1085%" height="15" fill="rgb(220,229,9)"/><text x="65.6142%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (47 samples, 0.51%)</title><rect x="65.1796%" y="373" width="0.5101%" height="15" fill="rgb(250,87,22)"/><text x="65.4296%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (14 samples, 0.15%)</title><rect x="65.5378%" y="357" width="0.1520%" height="15" fill="rgb(239,43,17)"/><text x="65.7878%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (10 samples, 0.11%)</title><rect x="65.9611%" y="325" width="0.1085%" height="15" fill="rgb(231,177,25)"/><text x="66.2111%" y="335.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (13 samples, 0.14%)</title><rect x="66.0697%" y="309" width="0.1411%" height="15" fill="rgb(219,179,1)"/><text x="66.3197%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (30 samples, 0.33%)</title><rect x="65.9286%" y="341" width="0.3256%" height="15" fill="rgb(238,219,53)"/><text x="66.1786%" y="351.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (17 samples, 0.18%)</title><rect x="66.0697%" y="325" width="0.1845%" height="15" fill="rgb(232,167,36)"/><text x="66.3197%" y="335.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (14 samples, 0.15%)</title><rect x="66.2976%" y="309" width="0.1520%" height="15" fill="rgb(244,19,51)"/><text x="66.5476%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (24 samples, 0.26%)</title><rect x="66.2542%" y="341" width="0.2605%" height="15" fill="rgb(224,6,22)"/><text x="66.5042%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (22 samples, 0.24%)</title><rect x="66.2759%" y="325" width="0.2388%" height="15" fill="rgb(224,145,5)"/><text x="66.5259%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (244 samples, 2.65%)</title><rect x="63.9314%" y="405" width="2.6484%" height="15" fill="rgb(234,130,49)"/><text x="64.1814%" y="415.50">&lt;s..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (237 samples, 2.57%)</title><rect x="64.0074%" y="389" width="2.5725%" height="15" fill="rgb(254,6,2)"/><text x="64.2574%" y="399.50">se..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (66 samples, 0.72%)</title><rect x="65.8635%" y="373" width="0.7164%" height="15" fill="rgb(208,96,46)"/><text x="66.1135%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (61 samples, 0.66%)</title><rect x="65.9177%" y="357" width="0.6621%" height="15" fill="rgb(239,3,39)"/><text x="66.1677%" y="367.50"></text></g><g><title>[unknown] (33 samples, 0.36%)</title><rect x="66.7209%" y="357" width="0.3582%" height="15" fill="rgb(233,210,1)"/><text x="66.9709%" y="367.50"></text></g><g><title>[unknown] (32 samples, 0.35%)</title><rect x="66.7318%" y="341" width="0.3473%" height="15" fill="rgb(244,137,37)"/><text x="66.9818%" y="351.50"></text></g><g><title>[unknown] (32 samples, 0.35%)</title><rect x="66.7318%" y="325" width="0.3473%" height="15" fill="rgb(240,136,2)"/><text x="66.9818%" y="335.50"></text></g><g><title>[unknown] (31 samples, 0.34%)</title><rect x="66.7426%" y="309" width="0.3365%" height="15" fill="rgb(239,18,37)"/><text x="66.9926%" y="319.50"></text></g><g><title>[unknown] (30 samples, 0.33%)</title><rect x="66.7535%" y="293" width="0.3256%" height="15" fill="rgb(218,185,22)"/><text x="67.0035%" y="303.50"></text></g><g><title>[unknown] (30 samples, 0.33%)</title><rect x="66.7535%" y="277" width="0.3256%" height="15" fill="rgb(225,218,4)"/><text x="67.0035%" y="287.50"></text></g><g><title>[unknown] (28 samples, 0.30%)</title><rect x="66.7752%" y="261" width="0.3039%" height="15" fill="rgb(230,182,32)"/><text x="67.0252%" y="271.50"></text></g><g><title>[unknown] (25 samples, 0.27%)</title><rect x="66.8078%" y="245" width="0.2714%" height="15" fill="rgb(242,56,43)"/><text x="67.0578%" y="255.50"></text></g><g><title>[unknown] (19 samples, 0.21%)</title><rect x="66.8729%" y="229" width="0.2062%" height="15" fill="rgb(233,99,24)"/><text x="67.1229%" y="239.50"></text></g><g><title>[unknown] (17 samples, 0.18%)</title><rect x="66.8946%" y="213" width="0.1845%" height="15" fill="rgb(234,209,42)"/><text x="67.1446%" y="223.50"></text></g><g><title>__GI___libc_malloc (42 samples, 0.46%)</title><rect x="66.6667%" y="389" width="0.4559%" height="15" fill="rgb(227,7,12)"/><text x="66.9167%" y="399.50"></text></g><g><title>_int_malloc (41 samples, 0.45%)</title><rect x="66.6775%" y="373" width="0.4450%" height="15" fill="rgb(245,203,43)"/><text x="66.9275%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (502 samples, 5.45%)</title><rect x="61.7171%" y="421" width="5.4488%" height="15" fill="rgb(238,205,33)"/><text x="61.9671%" y="431.50">&lt;serde_..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (54 samples, 0.59%)</title><rect x="66.5798%" y="405" width="0.5861%" height="15" fill="rgb(231,56,7)"/><text x="66.8298%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (2,619 samples, 28.43%)</title><rect x="38.8798%" y="469" width="28.4272%" height="15" fill="rgb(244,186,29)"/><text x="39.1298%" y="479.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::Ma..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2,581 samples, 28.01%)</title><rect x="39.2923%" y="453" width="28.0148%" height="15" fill="rgb(234,111,31)"/><text x="39.5423%" y="463.50">serde_json::value::de::&lt;impl serde::de::Deser..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (553 samples, 6.00%)</title><rect x="61.3047%" y="437" width="6.0024%" height="15" fill="rgb(241,149,10)"/><text x="61.5547%" y="447.50">serde_js..</text></g><g><title>[unknown] (95 samples, 1.03%)</title><rect x="69.0655%" y="421" width="1.0312%" height="15" fill="rgb(249,206,44)"/><text x="69.3155%" y="431.50"></text></g><g><title>[unknown] (91 samples, 0.99%)</title><rect x="69.1089%" y="405" width="0.9877%" height="15" fill="rgb(251,153,30)"/><text x="69.3589%" y="415.50"></text></g><g><title>[unknown] (90 samples, 0.98%)</title><rect x="69.1197%" y="389" width="0.9769%" height="15" fill="rgb(239,152,38)"/><text x="69.3697%" y="399.50"></text></g><g><title>[unknown] (87 samples, 0.94%)</title><rect x="69.1523%" y="373" width="0.9443%" height="15" fill="rgb(249,139,47)"/><text x="69.4023%" y="383.50"></text></g><g><title>[unknown] (83 samples, 0.90%)</title><rect x="69.1957%" y="357" width="0.9009%" height="15" fill="rgb(244,64,35)"/><text x="69.4457%" y="367.50"></text></g><g><title>[unknown] (80 samples, 0.87%)</title><rect x="69.2283%" y="341" width="0.8683%" height="15" fill="rgb(216,46,15)"/><text x="69.4783%" y="351.50"></text></g><g><title>[unknown] (74 samples, 0.80%)</title><rect x="69.2934%" y="325" width="0.8032%" height="15" fill="rgb(250,74,19)"/><text x="69.5434%" y="335.50"></text></g><g><title>[unknown] (67 samples, 0.73%)</title><rect x="69.3694%" y="309" width="0.7272%" height="15" fill="rgb(249,42,33)"/><text x="69.6194%" y="319.50"></text></g><g><title>[unknown] (52 samples, 0.56%)</title><rect x="69.5322%" y="293" width="0.5644%" height="15" fill="rgb(242,149,17)"/><text x="69.7822%" y="303.50"></text></g><g><title>[unknown] (46 samples, 0.50%)</title><rect x="69.5973%" y="277" width="0.4993%" height="15" fill="rgb(244,29,21)"/><text x="69.8473%" y="287.50"></text></g><g><title>__GI___libc_malloc (118 samples, 1.28%)</title><rect x="68.9026%" y="453" width="1.2808%" height="15" fill="rgb(220,130,37)"/><text x="69.1526%" y="463.50"></text></g><g><title>_int_malloc (116 samples, 1.26%)</title><rect x="68.9243%" y="437" width="1.2591%" height="15" fill="rgb(211,67,2)"/><text x="69.1743%" y="447.50"></text></g><g><title>__memcmp_sse4_1 (193 samples, 2.09%)</title><rect x="70.1834%" y="453" width="2.0949%" height="15" fill="rgb(235,68,52)"/><text x="70.4334%" y="463.50">_..</text></g><g><title>__memcpy_ssse3 (15 samples, 0.16%)</title><rect x="72.2783%" y="453" width="0.1628%" height="15" fill="rgb(246,142,3)"/><text x="72.5283%" y="463.50"></text></g><g><title>[unknown] (61 samples, 0.66%)</title><rect x="73.5700%" y="405" width="0.6621%" height="15" fill="rgb(241,25,7)"/><text x="73.8200%" y="415.50"></text></g><g><title>[unknown] (56 samples, 0.61%)</title><rect x="73.6242%" y="389" width="0.6078%" height="15" fill="rgb(242,119,39)"/><text x="73.8742%" y="399.50"></text></g><g><title>[unknown] (55 samples, 0.60%)</title><rect x="73.6351%" y="373" width="0.5970%" height="15" fill="rgb(241,98,45)"/><text x="73.8851%" y="383.50"></text></g><g><title>[unknown] (55 samples, 0.60%)</title><rect x="73.6351%" y="357" width="0.5970%" height="15" fill="rgb(254,28,30)"/><text x="73.8851%" y="367.50"></text></g><g><title>[unknown] (53 samples, 0.58%)</title><rect x="73.6568%" y="341" width="0.5753%" height="15" fill="rgb(241,142,54)"/><text x="73.9068%" y="351.50"></text></g><g><title>[unknown] (50 samples, 0.54%)</title><rect x="73.6894%" y="325" width="0.5427%" height="15" fill="rgb(222,85,15)"/><text x="73.9394%" y="335.50"></text></g><g><title>[unknown] (46 samples, 0.50%)</title><rect x="73.7328%" y="309" width="0.4993%" height="15" fill="rgb(210,85,47)"/><text x="73.9828%" y="319.50"></text></g><g><title>[unknown] (41 samples, 0.45%)</title><rect x="73.7870%" y="293" width="0.4450%" height="15" fill="rgb(224,206,25)"/><text x="74.0370%" y="303.50"></text></g><g><title>[unknown] (33 samples, 0.36%)</title><rect x="73.8739%" y="277" width="0.3582%" height="15" fill="rgb(243,201,19)"/><text x="74.1239%" y="287.50"></text></g><g><title>[unknown] (32 samples, 0.35%)</title><rect x="73.8847%" y="261" width="0.3473%" height="15" fill="rgb(236,59,4)"/><text x="74.1347%" y="271.50"></text></g><g><title>__GI___libc_malloc (86 samples, 0.93%)</title><rect x="73.3095%" y="437" width="0.9335%" height="15" fill="rgb(254,179,45)"/><text x="73.5595%" y="447.50"></text></g><g><title>_int_malloc (84 samples, 0.91%)</title><rect x="73.3312%" y="421" width="0.9118%" height="15" fill="rgb(226,14,10)"/><text x="73.5812%" y="431.50"></text></g><g><title>__memcpy_ssse3 (19 samples, 0.21%)</title><rect x="74.2429%" y="437" width="0.2062%" height="15" fill="rgb(244,27,41)"/><text x="74.4929%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4,945 samples, 53.67%)</title><rect x="20.8835%" y="485" width="53.6742%" height="15" fill="rgb(235,35,32)"/><text x="21.1335%" y="495.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::dese..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (668 samples, 7.25%)</title><rect x="67.3071%" y="469" width="7.2506%" height="15" fill="rgb(218,68,31)"/><text x="67.5571%" y="479.50">alloc::col..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (195 samples, 2.12%)</title><rect x="72.4411%" y="453" width="2.1166%" height="15" fill="rgb(207,120,37)"/><text x="72.6911%" y="463.50">a..</text></g><g><title>__GI___libc_malloc (22 samples, 0.24%)</title><rect x="74.5577%" y="485" width="0.2388%" height="15" fill="rgb(227,98,0)"/><text x="74.8077%" y="495.50"></text></g><g><title>_int_malloc (16 samples, 0.17%)</title><rect x="74.6228%" y="469" width="0.1737%" height="15" fill="rgb(207,7,3)"/><text x="74.8728%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5,287 samples, 57.39%)</title><rect x="17.5079%" y="549" width="57.3863%" height="15" fill="rgb(206,98,19)"/><text x="17.7579%" y="559.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,285 samples, 57.36%)</title><rect x="17.5296%" y="533" width="57.3646%" height="15" fill="rgb(217,5,26)"/><text x="17.7796%" y="543.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,252 samples, 57.01%)</title><rect x="17.8878%" y="517" width="57.0064%" height="15" fill="rgb(235,190,38)"/><text x="18.1378%" y="527.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,176 samples, 56.18%)</title><rect x="18.7127%" y="501" width="56.1815%" height="15" fill="rgb(247,86,24)"/><text x="18.9627%" y="511.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>__memcmp_sse4_1 (69 samples, 0.75%)</title><rect x="75.1981%" y="533" width="0.7489%" height="15" fill="rgb(205,101,16)"/><text x="75.4481%" y="543.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.12%)</title><rect x="75.9796%" y="517" width="0.1194%" height="15" fill="rgb(246,168,33)"/><text x="76.2296%" y="527.50"></text></g><g><title>serde_json::de::from_reader (5,507 samples, 59.77%)</title><rect x="16.3465%" y="645" width="59.7742%" height="15" fill="rgb(231,114,1)"/><text x="16.5965%" y="655.50">serde_json::de::from_reader</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,507 samples, 59.77%)</title><rect x="16.3465%" y="629" width="59.7742%" height="15" fill="rgb(207,184,53)"/><text x="16.5965%" y="639.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5,507 samples, 59.77%)</title><rect x="16.3465%" y="613" width="59.7742%" height="15" fill="rgb(224,95,51)"/><text x="16.5965%" y="623.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::Va..</text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5,507 samples, 59.77%)</title><rect x="16.3465%" y="597" width="59.7742%" height="15" fill="rgb(212,188,45)"/><text x="16.5965%" y="607.50">&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5,507 samples, 59.77%)</title><rect x="16.3465%" y="581" width="59.7742%" height="15" fill="rgb(223,154,38)"/><text x="16.5965%" y="591.50">serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5,507 samples, 59.77%)</title><rect x="16.3465%" y="565" width="59.7742%" height="15" fill="rgb(251,22,52)"/><text x="16.5965%" y="575.50">&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::Va..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (113 samples, 1.23%)</title><rect x="74.8942%" y="549" width="1.2265%" height="15" fill="rgb(229,209,22)"/><text x="75.1442%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (16 samples, 0.17%)</title><rect x="75.9470%" y="533" width="0.1737%" height="15" fill="rgb(234,138,34)"/><text x="76.1970%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (17 samples, 0.18%)</title><rect x="76.6634%" y="469" width="0.1845%" height="15" fill="rgb(212,95,11)"/><text x="76.9134%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.17%)</title><rect x="76.6743%" y="453" width="0.1737%" height="15" fill="rgb(240,179,47)"/><text x="76.9243%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (16 samples, 0.17%)</title><rect x="76.6743%" y="437" width="0.1737%" height="15" fill="rgb(240,163,11)"/><text x="76.9243%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 0.17%)</title><rect x="76.6743%" y="421" width="0.1737%" height="15" fill="rgb(236,37,12)"/><text x="76.9243%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.14%)</title><rect x="76.7068%" y="405" width="0.1411%" height="15" fill="rgb(232,164,16)"/><text x="76.9568%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (12 samples, 0.13%)</title><rect x="76.7177%" y="389" width="0.1303%" height="15" fill="rgb(244,205,15)"/><text x="76.9677%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.13%)</title><rect x="76.7177%" y="373" width="0.1303%" height="15" fill="rgb(223,117,47)"/><text x="76.9677%" y="383.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.13%)</title><rect x="76.7177%" y="357" width="0.1303%" height="15" fill="rgb(244,107,35)"/><text x="76.9677%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (21 samples, 0.23%)</title><rect x="76.6417%" y="565" width="0.2279%" height="15" fill="rgb(205,140,8)"/><text x="76.8917%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (19 samples, 0.21%)</title><rect x="76.6634%" y="549" width="0.2062%" height="15" fill="rgb(228,84,46)"/><text x="76.9134%" y="559.50"></text></g><g><title>alloc::string::String::push_str (19 samples, 0.21%)</title><rect x="76.6634%" y="533" width="0.2062%" height="15" fill="rgb(254,188,9)"/><text x="76.9134%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (19 samples, 0.21%)</title><rect x="76.6634%" y="517" width="0.2062%" height="15" fill="rgb(206,112,54)"/><text x="76.9134%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (19 samples, 0.21%)</title><rect x="76.6634%" y="501" width="0.2062%" height="15" fill="rgb(216,84,49)"/><text x="76.9134%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (19 samples, 0.21%)</title><rect x="76.6634%" y="485" width="0.2062%" height="15" fill="rgb(214,194,35)"/><text x="76.9134%" y="495.50"></text></g><g><title>alloc::fmt::format (36 samples, 0.39%)</title><rect x="76.5983%" y="613" width="0.3908%" height="15" fill="rgb(249,28,3)"/><text x="76.8483%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (35 samples, 0.38%)</title><rect x="76.6091%" y="597" width="0.3799%" height="15" fill="rgb(222,56,52)"/><text x="76.8591%" y="607.50"></text></g><g><title>core::fmt::write (34 samples, 0.37%)</title><rect x="76.6200%" y="581" width="0.3690%" height="15" fill="rgb(245,217,50)"/><text x="76.8700%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (25 samples, 0.27%)</title><rect x="77.1844%" y="597" width="0.2714%" height="15" fill="rgb(213,201,24)"/><text x="77.4344%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (20 samples, 0.22%)</title><rect x="77.2387%" y="581" width="0.2171%" height="15" fill="rgb(248,116,28)"/><text x="77.4887%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.22%)</title><rect x="77.2387%" y="565" width="0.2171%" height="15" fill="rgb(219,72,43)"/><text x="77.4887%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.22%)</title><rect x="77.2387%" y="549" width="0.2171%" height="15" fill="rgb(209,138,14)"/><text x="77.4887%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.18%)</title><rect x="77.2712%" y="533" width="0.1845%" height="15" fill="rgb(222,18,33)"/><text x="77.5212%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.18%)</title><rect x="77.2712%" y="517" width="0.1845%" height="15" fill="rgb(213,199,7)"/><text x="77.5212%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.18%)</title><rect x="77.2712%" y="501" width="0.1845%" height="15" fill="rgb(250,110,10)"/><text x="77.5212%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.18%)</title><rect x="77.2712%" y="485" width="0.1845%" height="15" fill="rgb(248,123,6)"/><text x="77.5212%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.17%)</title><rect x="77.2821%" y="469" width="0.1737%" height="15" fill="rgb(206,91,31)"/><text x="77.5321%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.17%)</title><rect x="77.2821%" y="453" width="0.1737%" height="15" fill="rgb(211,154,13)"/><text x="77.5321%" y="463.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.17%)</title><rect x="77.2821%" y="437" width="0.1737%" height="15" fill="rgb(225,148,7)"/><text x="77.5321%" y="447.50"></text></g><g><title>__GI___libc_free (14 samples, 0.15%)</title><rect x="77.4558%" y="597" width="0.1520%" height="15" fill="rgb(220,160,43)"/><text x="77.7058%" y="607.50"></text></g><g><title>__GI___libc_realloc (36 samples, 0.39%)</title><rect x="78.0962%" y="325" width="0.3908%" height="15" fill="rgb(213,52,39)"/><text x="78.3462%" y="335.50"></text></g><g><title>_int_realloc (25 samples, 0.27%)</title><rect x="78.2156%" y="309" width="0.2714%" height="15" fill="rgb(243,137,7)"/><text x="78.4656%" y="319.50"></text></g><g><title>_int_malloc (10 samples, 0.11%)</title><rect x="78.3784%" y="293" width="0.1085%" height="15" fill="rgb(230,79,13)"/><text x="78.6284%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (50 samples, 0.54%)</title><rect x="77.9985%" y="389" width="0.5427%" height="15" fill="rgb(247,105,23)"/><text x="78.2485%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (41 samples, 0.45%)</title><rect x="78.0962%" y="373" width="0.4450%" height="15" fill="rgb(223,179,41)"/><text x="78.3462%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (41 samples, 0.45%)</title><rect x="78.0962%" y="357" width="0.4450%" height="15" fill="rgb(218,9,34)"/><text x="78.3462%" y="367.50"></text></g><g><title>alloc::alloc::realloc (41 samples, 0.45%)</title><rect x="78.0962%" y="341" width="0.4450%" height="15" fill="rgb(222,106,8)"/><text x="78.3462%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (63 samples, 0.68%)</title><rect x="77.8899%" y="453" width="0.6838%" height="15" fill="rgb(211,220,0)"/><text x="78.1399%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (58 samples, 0.63%)</title><rect x="77.9442%" y="437" width="0.6295%" height="15" fill="rgb(229,52,16)"/><text x="78.1942%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (58 samples, 0.63%)</title><rect x="77.9442%" y="421" width="0.6295%" height="15" fill="rgb(212,155,18)"/><text x="78.1942%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (57 samples, 0.62%)</title><rect x="77.9551%" y="405" width="0.6187%" height="15" fill="rgb(242,21,14)"/><text x="78.2051%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.17%)</title><rect x="78.5738%" y="453" width="0.1737%" height="15" fill="rgb(222,19,48)"/><text x="78.8238%" y="463.50"></text></g><g><title>__memcpy_ssse3 (12 samples, 0.13%)</title><rect x="78.6172%" y="437" width="0.1303%" height="15" fill="rgb(232,45,27)"/><text x="78.8672%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (87 samples, 0.94%)</title><rect x="77.8140%" y="549" width="0.9443%" height="15" fill="rgb(249,103,42)"/><text x="78.0640%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (84 samples, 0.91%)</title><rect x="77.8465%" y="533" width="0.9118%" height="15" fill="rgb(246,81,33)"/><text x="78.0965%" y="543.50"></text></g><g><title>alloc::string::String::push_str (84 samples, 0.91%)</title><rect x="77.8465%" y="517" width="0.9118%" height="15" fill="rgb(252,33,42)"/><text x="78.0965%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (84 samples, 0.91%)</title><rect x="77.8465%" y="501" width="0.9118%" height="15" fill="rgb(209,212,41)"/><text x="78.0965%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (84 samples, 0.91%)</title><rect x="77.8465%" y="485" width="0.9118%" height="15" fill="rgb(207,154,6)"/><text x="78.0965%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (84 samples, 0.91%)</title><rect x="77.8465%" y="469" width="0.9118%" height="15" fill="rgb(223,64,47)"/><text x="78.0965%" y="479.50"></text></g><g><title>alloc::fmt::format (127 samples, 1.38%)</title><rect x="77.6294%" y="597" width="1.3785%" height="15" fill="rgb(211,161,38)"/><text x="77.8794%" y="607.50"></text></g><g><title>core::fmt::Write::write_fmt (121 samples, 1.31%)</title><rect x="77.6946%" y="581" width="1.3134%" height="15" fill="rgb(219,138,40)"/><text x="77.9446%" y="591.50"></text></g><g><title>core::fmt::write (120 samples, 1.30%)</title><rect x="77.7054%" y="565" width="1.3025%" height="15" fill="rgb(241,228,46)"/><text x="77.9554%" y="575.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (15 samples, 0.16%)</title><rect x="78.8451%" y="549" width="0.1628%" height="15" fill="rgb(223,209,38)"/><text x="79.0951%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (10 samples, 0.11%)</title><rect x="78.8994%" y="533" width="0.1085%" height="15" fill="rgb(236,164,45)"/><text x="79.1494%" y="543.50"></text></g><g><title>serde_json::value::Value::is_object (27 samples, 0.29%)</title><rect x="79.0296%" y="597" width="0.2931%" height="15" fill="rgb(231,15,5)"/><text x="79.2796%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (29 samples, 0.31%)</title><rect x="81.7215%" y="517" width="0.3148%" height="15" fill="rgb(252,35,15)"/><text x="81.9715%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (29 samples, 0.31%)</title><rect x="81.7215%" y="501" width="0.3148%" height="15" fill="rgb(248,181,18)"/><text x="81.9715%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (29 samples, 0.31%)</title><rect x="81.7215%" y="485" width="0.3148%" height="15" fill="rgb(233,39,42)"/><text x="81.9715%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.31%)</title><rect x="81.7215%" y="469" width="0.3148%" height="15" fill="rgb(238,110,33)"/><text x="81.9715%" y="479.50"></text></g><g><title>__memcpy_ssse3 (29 samples, 0.31%)</title><rect x="81.7215%" y="453" width="0.3148%" height="15" fill="rgb(233,195,10)"/><text x="81.9715%" y="463.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.26%)</title><rect x="82.0688%" y="405" width="0.2605%" height="15" fill="rgb(254,105,3)"/><text x="82.3188%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (96 samples, 1.04%)</title><rect x="81.4610%" y="581" width="1.0420%" height="15" fill="rgb(221,225,9)"/><text x="81.7110%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (77 samples, 0.84%)</title><rect x="81.6672%" y="565" width="0.8358%" height="15" fill="rgb(224,227,45)"/><text x="81.9172%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (72 samples, 0.78%)</title><rect x="81.7215%" y="549" width="0.7815%" height="15" fill="rgb(229,198,43)"/><text x="81.9715%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (72 samples, 0.78%)</title><rect x="81.7215%" y="533" width="0.7815%" height="15" fill="rgb(206,209,35)"/><text x="81.9715%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (43 samples, 0.47%)</title><rect x="82.0363%" y="517" width="0.4667%" height="15" fill="rgb(245,195,53)"/><text x="82.2863%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (43 samples, 0.47%)</title><rect x="82.0363%" y="501" width="0.4667%" height="15" fill="rgb(240,92,26)"/><text x="82.2863%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.47%)</title><rect x="82.0363%" y="485" width="0.4667%" height="15" fill="rgb(207,40,23)"/><text x="82.2863%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.47%)</title><rect x="82.0363%" y="469" width="0.4667%" height="15" fill="rgb(223,111,35)"/><text x="82.2863%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (40 samples, 0.43%)</title><rect x="82.0688%" y="453" width="0.4342%" height="15" fill="rgb(229,147,28)"/><text x="82.3188%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.43%)</title><rect x="82.0688%" y="437" width="0.4342%" height="15" fill="rgb(211,29,28)"/><text x="82.3188%" y="447.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.43%)</title><rect x="82.0688%" y="421" width="0.4342%" height="15" fill="rgb(228,72,33)"/><text x="82.3188%" y="431.50"></text></g><g><title>__rust_alloc (12 samples, 0.13%)</title><rect x="82.3727%" y="405" width="0.1303%" height="15" fill="rgb(205,214,31)"/><text x="82.6227%" y="415.50"></text></g><g><title>__GI___libc_free (11 samples, 0.12%)</title><rect x="82.5030%" y="581" width="0.1194%" height="15" fill="rgb(224,111,15)"/><text x="82.7530%" y="591.50"></text></g><g><title>__memcpy_ssse3 (33 samples, 0.36%)</title><rect x="82.6224%" y="581" width="0.3582%" height="15" fill="rgb(253,21,26)"/><text x="82.8724%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (82 samples, 0.89%)</title><rect x="82.9914%" y="581" width="0.8900%" height="15" fill="rgb(245,139,43)"/><text x="83.2414%" y="591.50"></text></g><g><title>__memcpy_ssse3 (16 samples, 0.17%)</title><rect x="84.8475%" y="533" width="0.1737%" height="15" fill="rgb(252,170,7)"/><text x="85.0975%" y="543.50"></text></g><g><title>_int_free (22 samples, 0.24%)</title><rect x="85.0212%" y="533" width="0.2388%" height="15" fill="rgb(231,118,14)"/><text x="85.2712%" y="543.50"></text></g><g><title>__GI___libc_realloc (123 samples, 1.34%)</title><rect x="84.1745%" y="565" width="1.3351%" height="15" fill="rgb(238,83,0)"/><text x="84.4245%" y="575.50"></text></g><g><title>_int_realloc (88 samples, 0.96%)</title><rect x="84.5544%" y="549" width="0.9552%" height="15" fill="rgb(221,39,39)"/><text x="84.8044%" y="559.50"></text></g><g><title>_int_malloc (23 samples, 0.25%)</title><rect x="85.2600%" y="533" width="0.2496%" height="15" fill="rgb(222,119,46)"/><text x="85.5100%" y="543.50"></text></g><g><title>__rdl_realloc (20 samples, 0.22%)</title><rect x="85.5096%" y="565" width="0.2171%" height="15" fill="rgb(222,165,49)"/><text x="85.7596%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (14 samples, 0.15%)</title><rect x="85.5747%" y="549" width="0.1520%" height="15" fill="rgb(219,113,52)"/><text x="85.8247%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (174 samples, 1.89%)</title><rect x="83.8815%" y="581" width="1.8886%" height="15" fill="rgb(214,7,15)"/><text x="84.1315%" y="591.50">a..</text></g><g><title>__libc_calloc (13 samples, 0.14%)</title><rect x="85.8461%" y="565" width="0.1411%" height="15" fill="rgb(235,32,4)"/><text x="86.0961%" y="575.50"></text></g><g><title>regex::exec::ExecNoSync::many_matches_at (32 samples, 0.35%)</title><rect x="85.9872%" y="565" width="0.3473%" height="15" fill="rgb(238,90,54)"/><text x="86.2372%" y="575.50"></text></g><g><title>memchr::x86::avx::memchr (15 samples, 0.16%)</title><rect x="86.1717%" y="549" width="0.1628%" height="15" fill="rgb(213,208,19)"/><text x="86.4217%" y="559.50"></text></g><g><title>memchr::x86::sse2::memchr (13 samples, 0.14%)</title><rect x="86.1934%" y="533" width="0.1411%" height="15" fill="rgb(233,156,4)"/><text x="86.4434%" y="543.50"></text></g><g><title>regex::re_set::bytes::RegexSet::matches (53 samples, 0.58%)</title><rect x="85.7701%" y="581" width="0.5753%" height="15" fill="rgb(207,194,5)"/><text x="86.0201%" y="591.50"></text></g><g><title>serde_json::value::Value::is_object (11 samples, 0.12%)</title><rect x="86.3997%" y="581" width="0.1194%" height="15" fill="rgb(206,111,30)"/><text x="86.6497%" y="591.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (223 samples, 2.42%)</title><rect x="86.7144%" y="357" width="2.4205%" height="15" fill="rgb(243,70,54)"/><text x="86.9644%" y="367.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (223 samples, 2.42%)</title><rect x="86.7144%" y="341" width="2.4205%" height="15" fill="rgb(242,28,8)"/><text x="86.9644%" y="351.50">st..</text></g><g><title>__GI___libc_write (223 samples, 2.42%)</title><rect x="86.7144%" y="325" width="2.4205%" height="15" fill="rgb(219,106,18)"/><text x="86.9644%" y="335.50">__..</text></g><g><title>[unknown] (222 samples, 2.41%)</title><rect x="86.7253%" y="309" width="2.4096%" height="15" fill="rgb(244,222,10)"/><text x="86.9753%" y="319.50">[u..</text></g><g><title>[unknown] (214 samples, 2.32%)</title><rect x="86.8121%" y="293" width="2.3228%" height="15" fill="rgb(236,179,52)"/><text x="87.0621%" y="303.50">[..</text></g><g><title>[unknown] (213 samples, 2.31%)</title><rect x="86.8230%" y="277" width="2.3120%" height="15" fill="rgb(213,23,39)"/><text x="87.0730%" y="287.50">[..</text></g><g><title>[unknown] (212 samples, 2.30%)</title><rect x="86.8338%" y="261" width="2.3011%" height="15" fill="rgb(238,48,10)"/><text x="87.0838%" y="271.50">[..</text></g><g><title>[unknown] (212 samples, 2.30%)</title><rect x="86.8338%" y="245" width="2.3011%" height="15" fill="rgb(251,196,23)"/><text x="87.0838%" y="255.50">[..</text></g><g><title>[unknown] (212 samples, 2.30%)</title><rect x="86.8338%" y="229" width="2.3011%" height="15" fill="rgb(250,152,24)"/><text x="87.0838%" y="239.50">[..</text></g><g><title>[unknown] (209 samples, 2.27%)</title><rect x="86.8664%" y="213" width="2.2685%" height="15" fill="rgb(209,150,17)"/><text x="87.1164%" y="223.50">[..</text></g><g><title>[unknown] (204 samples, 2.21%)</title><rect x="86.9207%" y="197" width="2.2143%" height="15" fill="rgb(234,202,34)"/><text x="87.1707%" y="207.50">[..</text></g><g><title>[unknown] (183 samples, 1.99%)</title><rect x="87.1486%" y="181" width="1.9863%" height="15" fill="rgb(253,148,53)"/><text x="87.3986%" y="191.50">[..</text></g><g><title>[unknown] (154 samples, 1.67%)</title><rect x="87.4634%" y="165" width="1.6716%" height="15" fill="rgb(218,129,16)"/><text x="87.7134%" y="175.50"></text></g><g><title>[unknown] (119 samples, 1.29%)</title><rect x="87.8433%" y="149" width="1.2917%" height="15" fill="rgb(216,85,19)"/><text x="88.0933%" y="159.50"></text></g><g><title>[unknown] (92 samples, 1.00%)</title><rect x="88.1363%" y="133" width="0.9986%" height="15" fill="rgb(235,228,7)"/><text x="88.3863%" y="143.50"></text></g><g><title>[unknown] (79 samples, 0.86%)</title><rect x="88.2774%" y="117" width="0.8575%" height="15" fill="rgb(245,175,0)"/><text x="88.5274%" y="127.50"></text></g><g><title>[unknown] (60 samples, 0.65%)</title><rect x="88.4837%" y="101" width="0.6513%" height="15" fill="rgb(208,168,36)"/><text x="88.7337%" y="111.50"></text></g><g><title>[unknown] (59 samples, 0.64%)</title><rect x="88.4945%" y="85" width="0.6404%" height="15" fill="rgb(246,171,24)"/><text x="88.7445%" y="95.50"></text></g><g><title>[unknown] (40 samples, 0.43%)</title><rect x="88.7007%" y="69" width="0.4342%" height="15" fill="rgb(215,142,24)"/><text x="88.9507%" y="79.50"></text></g><g><title>[unknown] (13 samples, 0.14%)</title><rect x="88.9938%" y="53" width="0.1411%" height="15" fill="rgb(250,187,7)"/><text x="89.2438%" y="63.50"></text></g><g><title>[unknown] (11 samples, 0.12%)</title><rect x="89.0155%" y="37" width="0.1194%" height="15" fill="rgb(228,66,33)"/><text x="89.2655%" y="47.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (225 samples, 2.44%)</title><rect x="86.7036%" y="389" width="2.4422%" height="15" fill="rgb(234,215,21)"/><text x="86.9536%" y="399.50">st..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (224 samples, 2.43%)</title><rect x="86.7144%" y="373" width="2.4313%" height="15" fill="rgb(222,191,20)"/><text x="86.9644%" y="383.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (232 samples, 2.52%)</title><rect x="86.6384%" y="421" width="2.5182%" height="15" fill="rgb(245,79,54)"/><text x="86.8884%" y="431.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (232 samples, 2.52%)</title><rect x="86.6384%" y="405" width="2.5182%" height="15" fill="rgb(240,10,37)"/><text x="86.8884%" y="415.50">&lt;s..</text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (236 samples, 2.56%)</title><rect x="86.6059%" y="453" width="2.5616%" height="15" fill="rgb(214,192,32)"/><text x="86.8559%" y="463.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (235 samples, 2.55%)</title><rect x="86.6167%" y="437" width="2.5507%" height="15" fill="rgb(209,36,54)"/><text x="86.8667%" y="447.50">&lt;s..</text></g><g><title>std::io::Write::write_fmt (239 samples, 2.59%)</title><rect x="86.5842%" y="485" width="2.5942%" height="15" fill="rgb(220,10,11)"/><text x="86.8342%" y="495.50">st..</text></g><g><title>core::fmt::write (238 samples, 2.58%)</title><rect x="86.5950%" y="469" width="2.5833%" height="15" fill="rgb(221,106,17)"/><text x="86.8450%" y="479.50">co..</text></g><g><title>std::io::stdio::_print (247 samples, 2.68%)</title><rect x="86.5408%" y="581" width="2.6810%" height="15" fill="rgb(251,142,44)"/><text x="86.7908%" y="591.50">st..</text></g><g><title>std::io::stdio::print_to (246 samples, 2.67%)</title><rect x="86.5516%" y="565" width="2.6701%" height="15" fill="rgb(238,13,15)"/><text x="86.8016%" y="575.50">st..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (245 samples, 2.66%)</title><rect x="86.5625%" y="549" width="2.6593%" height="15" fill="rgb(208,107,27)"/><text x="86.8125%" y="559.50">co..</text></g><g><title>std::io::stdio::print_to::_{{closure}} (245 samples, 2.66%)</title><rect x="86.5625%" y="533" width="2.6593%" height="15" fill="rgb(205,136,37)"/><text x="86.8125%" y="543.50">st..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (245 samples, 2.66%)</title><rect x="86.5625%" y="517" width="2.6593%" height="15" fill="rgb(250,205,27)"/><text x="86.8125%" y="527.50">&lt;s..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (245 samples, 2.66%)</title><rect x="86.5625%" y="501" width="2.6593%" height="15" fill="rgb(210,80,43)"/><text x="86.8125%" y="511.50">&lt;&amp;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (16 samples, 0.17%)</title><rect x="90.2312%" y="501" width="0.1737%" height="15" fill="rgb(247,160,36)"/><text x="90.4812%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.17%)</title><rect x="90.2312%" y="485" width="0.1737%" height="15" fill="rgb(234,13,49)"/><text x="90.4812%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (16 samples, 0.17%)</title><rect x="90.2312%" y="469" width="0.1737%" height="15" fill="rgb(234,122,0)"/><text x="90.4812%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.16%)</title><rect x="90.2420%" y="453" width="0.1628%" height="15" fill="rgb(207,146,38)"/><text x="90.4920%" y="463.50"></text></g><g><title>__memcpy_ssse3 (15 samples, 0.16%)</title><rect x="90.2420%" y="437" width="0.1628%" height="15" fill="rgb(207,177,25)"/><text x="90.4920%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (42 samples, 0.46%)</title><rect x="90.1335%" y="565" width="0.4559%" height="15" fill="rgb(211,178,42)"/><text x="90.3835%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.37%)</title><rect x="90.2203%" y="549" width="0.3690%" height="15" fill="rgb(230,69,54)"/><text x="90.4703%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (33 samples, 0.36%)</title><rect x="90.2312%" y="533" width="0.3582%" height="15" fill="rgb(214,135,41)"/><text x="90.4812%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (33 samples, 0.36%)</title><rect x="90.2312%" y="517" width="0.3582%" height="15" fill="rgb(237,67,25)"/><text x="90.4812%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.18%)</title><rect x="90.4049%" y="501" width="0.1845%" height="15" fill="rgb(222,189,50)"/><text x="90.6549%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (17 samples, 0.18%)</title><rect x="90.4049%" y="485" width="0.1845%" height="15" fill="rgb(245,148,34)"/><text x="90.6549%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.18%)</title><rect x="90.4049%" y="469" width="0.1845%" height="15" fill="rgb(222,29,6)"/><text x="90.6549%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.18%)</title><rect x="90.4049%" y="453" width="0.1845%" height="15" fill="rgb(221,189,43)"/><text x="90.6549%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (16 samples, 0.17%)</title><rect x="90.4157%" y="437" width="0.1737%" height="15" fill="rgb(207,36,27)"/><text x="90.6657%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.17%)</title><rect x="90.4157%" y="421" width="0.1737%" height="15" fill="rgb(217,90,24)"/><text x="90.6657%" y="431.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.17%)</title><rect x="90.4157%" y="405" width="0.1737%" height="15" fill="rgb(224,66,35)"/><text x="90.6657%" y="415.50"></text></g><g><title>__GI___libc_free (62 samples, 0.67%)</title><rect x="90.6002%" y="565" width="0.6730%" height="15" fill="rgb(221,13,50)"/><text x="90.8502%" y="575.50"></text></g><g><title>_int_free (30 samples, 0.33%)</title><rect x="90.9476%" y="549" width="0.3256%" height="15" fill="rgb(236,68,49)"/><text x="91.1976%" y="559.50"></text></g><g><title>__memcpy_ssse3 (16 samples, 0.17%)</title><rect x="91.2732%" y="565" width="0.1737%" height="15" fill="rgb(229,146,28)"/><text x="91.5232%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (58 samples, 0.63%)</title><rect x="91.5554%" y="565" width="0.6295%" height="15" fill="rgb(225,31,38)"/><text x="91.8054%" y="575.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.25%)</title><rect x="92.5974%" y="293" width="0.2496%" height="15" fill="rgb(250,208,3)"/><text x="92.8474%" y="303.50"></text></g><g><title>_int_realloc (19 samples, 0.21%)</title><rect x="92.6408%" y="277" width="0.2062%" height="15" fill="rgb(246,54,23)"/><text x="92.8908%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (42 samples, 0.46%)</title><rect x="92.4346%" y="421" width="0.4559%" height="15" fill="rgb(243,76,11)"/><text x="92.6846%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (40 samples, 0.43%)</title><rect x="92.4563%" y="405" width="0.4342%" height="15" fill="rgb(245,21,50)"/><text x="92.7063%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (40 samples, 0.43%)</title><rect x="92.4563%" y="389" width="0.4342%" height="15" fill="rgb(228,9,43)"/><text x="92.7063%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (38 samples, 0.41%)</title><rect x="92.4780%" y="373" width="0.4125%" height="15" fill="rgb(208,100,47)"/><text x="92.7280%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (37 samples, 0.40%)</title><rect x="92.4889%" y="357" width="0.4016%" height="15" fill="rgb(232,26,8)"/><text x="92.7389%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (27 samples, 0.29%)</title><rect x="92.5974%" y="341" width="0.2931%" height="15" fill="rgb(216,166,38)"/><text x="92.8474%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (27 samples, 0.29%)</title><rect x="92.5974%" y="325" width="0.2931%" height="15" fill="rgb(251,202,51)"/><text x="92.8474%" y="335.50"></text></g><g><title>alloc::alloc::realloc (27 samples, 0.29%)</title><rect x="92.5974%" y="309" width="0.2931%" height="15" fill="rgb(254,216,34)"/><text x="92.8474%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (59 samples, 0.64%)</title><rect x="92.3478%" y="517" width="0.6404%" height="15" fill="rgb(251,32,27)"/><text x="92.5978%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (53 samples, 0.58%)</title><rect x="92.4129%" y="501" width="0.5753%" height="15" fill="rgb(208,127,28)"/><text x="92.6629%" y="511.50"></text></g><g><title>alloc::string::String::push_str (53 samples, 0.58%)</title><rect x="92.4129%" y="485" width="0.5753%" height="15" fill="rgb(224,137,22)"/><text x="92.6629%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (53 samples, 0.58%)</title><rect x="92.4129%" y="469" width="0.5753%" height="15" fill="rgb(254,70,32)"/><text x="92.6629%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (53 samples, 0.58%)</title><rect x="92.4129%" y="453" width="0.5753%" height="15" fill="rgb(229,75,37)"/><text x="92.6629%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (53 samples, 0.58%)</title><rect x="92.4129%" y="437" width="0.5753%" height="15" fill="rgb(252,64,23)"/><text x="92.6629%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (17 samples, 0.18%)</title><rect x="93.0533%" y="517" width="0.1845%" height="15" fill="rgb(232,162,48)"/><text x="93.3033%" y="527.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (15 samples, 0.16%)</title><rect x="93.0750%" y="501" width="0.1628%" height="15" fill="rgb(246,160,12)"/><text x="93.3250%" y="511.50"></text></g><g><title>alloc::fmt::format (98 samples, 1.06%)</title><rect x="92.1850%" y="565" width="1.0637%" height="15" fill="rgb(247,166,0)"/><text x="92.4350%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (92 samples, 1.00%)</title><rect x="92.2501%" y="549" width="0.9986%" height="15" fill="rgb(249,219,21)"/><text x="92.5001%" y="559.50"></text></g><g><title>core::fmt::write (91 samples, 0.99%)</title><rect x="92.2609%" y="533" width="0.9877%" height="15" fill="rgb(205,209,3)"/><text x="92.5109%" y="543.50"></text></g><g><title>__GI___libc_realloc (44 samples, 0.48%)</title><rect x="93.3138%" y="549" width="0.4776%" height="15" fill="rgb(243,44,1)"/><text x="93.5638%" y="559.50"></text></g><g><title>_int_realloc (34 samples, 0.37%)</title><rect x="93.4223%" y="533" width="0.3690%" height="15" fill="rgb(206,159,16)"/><text x="93.6723%" y="543.50"></text></g><g><title>_int_malloc (10 samples, 0.11%)</title><rect x="93.6828%" y="517" width="0.1085%" height="15" fill="rgb(244,77,30)"/><text x="93.9328%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (56 samples, 0.61%)</title><rect x="93.2487%" y="565" width="0.6078%" height="15" fill="rgb(218,69,12)"/><text x="93.4987%" y="575.50"></text></g><g><title>__libc_calloc (11 samples, 0.12%)</title><rect x="93.9216%" y="549" width="0.1194%" height="15" fill="rgb(212,87,7)"/><text x="94.1716%" y="559.50"></text></g><g><title>regex::exec::ExecNoSync::many_matches_at (31 samples, 0.34%)</title><rect x="94.0627%" y="549" width="0.3365%" height="15" fill="rgb(245,114,25)"/><text x="94.3127%" y="559.50"></text></g><g><title>memchr::x86::avx::memchr (17 samples, 0.18%)</title><rect x="94.2147%" y="533" width="0.1845%" height="15" fill="rgb(210,61,42)"/><text x="94.4647%" y="543.50"></text></g><g><title>regex::re_set::bytes::RegexSet::matches (54 samples, 0.59%)</title><rect x="93.8565%" y="565" width="0.5861%" height="15" fill="rgb(211,52,33)"/><text x="94.1065%" y="575.50"></text></g><g><title>serde_json::value::Value::is_object (65 samples, 0.71%)</title><rect x="94.6054%" y="565" width="0.7055%" height="15" fill="rgb(234,58,33)"/><text x="94.8554%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.18%)</title><rect x="95.8645%" y="549" width="0.1845%" height="15" fill="rgb(220,115,36)"/><text x="96.1145%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.16%)</title><rect x="95.8862%" y="533" width="0.1628%" height="15" fill="rgb(243,153,54)"/><text x="96.1362%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.16%)</title><rect x="95.8862%" y="517" width="0.1628%" height="15" fill="rgb(251,47,18)"/><text x="96.1362%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.16%)</title><rect x="95.8862%" y="501" width="0.1628%" height="15" fill="rgb(242,102,42)"/><text x="96.1362%" y="511.50"></text></g><g><title>__GI___libc_free (28 samples, 0.30%)</title><rect x="96.0491%" y="549" width="0.3039%" height="15" fill="rgb(234,31,38)"/><text x="96.2991%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (22 samples, 0.24%)</title><rect x="96.4398%" y="549" width="0.2388%" height="15" fill="rgb(221,117,51)"/><text x="96.6898%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (12 samples, 0.13%)</title><rect x="96.7329%" y="405" width="0.1303%" height="15" fill="rgb(212,20,18)"/><text x="96.9829%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (11 samples, 0.12%)</title><rect x="96.7437%" y="389" width="0.1194%" height="15" fill="rgb(245,133,36)"/><text x="96.9937%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (11 samples, 0.12%)</title><rect x="96.7437%" y="373" width="0.1194%" height="15" fill="rgb(212,6,19)"/><text x="96.9937%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.12%)</title><rect x="96.7437%" y="357" width="0.1194%" height="15" fill="rgb(218,1,36)"/><text x="96.9937%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (17 samples, 0.18%)</title><rect x="96.7220%" y="501" width="0.1845%" height="15" fill="rgb(246,84,54)"/><text x="96.9720%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (16 samples, 0.17%)</title><rect x="96.7329%" y="485" width="0.1737%" height="15" fill="rgb(242,110,6)"/><text x="96.9829%" y="495.50"></text></g><g><title>alloc::string::String::push_str (16 samples, 0.17%)</title><rect x="96.7329%" y="469" width="0.1737%" height="15" fill="rgb(214,47,5)"/><text x="96.9829%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (16 samples, 0.17%)</title><rect x="96.7329%" y="453" width="0.1737%" height="15" fill="rgb(218,159,25)"/><text x="96.9829%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (16 samples, 0.17%)</title><rect x="96.7329%" y="437" width="0.1737%" height="15" fill="rgb(215,211,28)"/><text x="96.9829%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (16 samples, 0.17%)</title><rect x="96.7329%" y="421" width="0.1737%" height="15" fill="rgb(238,59,32)"/><text x="96.9829%" y="431.50"></text></g><g><title>alloc::fmt::format (28 samples, 0.30%)</title><rect x="96.6786%" y="549" width="0.3039%" height="15" fill="rgb(226,82,3)"/><text x="96.9286%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (27 samples, 0.29%)</title><rect x="96.6895%" y="533" width="0.2931%" height="15" fill="rgb(240,164,32)"/><text x="96.9395%" y="543.50"></text></g><g><title>core::fmt::write (27 samples, 0.29%)</title><rect x="96.6895%" y="517" width="0.2931%" height="15" fill="rgb(232,46,7)"/><text x="96.9395%" y="527.50"></text></g><g><title>__GI___libc_realloc (27 samples, 0.29%)</title><rect x="97.0585%" y="533" width="0.2931%" height="15" fill="rgb(229,129,53)"/><text x="97.3085%" y="543.50"></text></g><g><title>_int_realloc (21 samples, 0.23%)</title><rect x="97.1236%" y="517" width="0.2279%" height="15" fill="rgb(234,188,29)"/><text x="97.3736%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (38 samples, 0.41%)</title><rect x="96.9825%" y="549" width="0.4125%" height="15" fill="rgb(246,141,4)"/><text x="97.2325%" y="559.50"></text></g><g><title>regex::exec::ExecNoSync::many_matches_at (14 samples, 0.15%)</title><rect x="97.5469%" y="533" width="0.1520%" height="15" fill="rgb(229,23,39)"/><text x="97.7969%" y="543.50"></text></g><g><title>regex::re_set::bytes::RegexSet::matches (29 samples, 0.31%)</title><rect x="97.3950%" y="549" width="0.3148%" height="15" fill="rgb(206,12,3)"/><text x="97.6450%" y="559.50"></text></g><g><title>serde_json::value::Value::is_object (55 samples, 0.60%)</title><rect x="97.8617%" y="549" width="0.5970%" height="15" fill="rgb(252,226,20)"/><text x="98.1117%" y="559.50"></text></g><g><title>__GI___libc_free (11 samples, 0.12%)</title><rect x="98.6215%" y="533" width="0.1194%" height="15" fill="rgb(216,123,35)"/><text x="98.8715%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::full_range (10 samples, 0.11%)</title><rect x="98.7409%" y="533" width="0.1085%" height="15" fill="rgb(212,68,40)"/><text x="98.9909%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.11%)</title><rect x="98.9471%" y="533" width="0.1085%" height="15" fill="rgb(254,125,32)"/><text x="99.1971%" y="543.50"></text></g><g><title>regex::re_set::bytes::RegexSet::matches (15 samples, 0.16%)</title><rect x="99.0557%" y="533" width="0.1628%" height="15" fill="rgb(253,97,22)"/><text x="99.3057%" y="543.50"></text></g><g><title>serde_json::value::Value::is_object (26 samples, 0.28%)</title><rect x="99.2293%" y="533" width="0.2822%" height="15" fill="rgb(241,101,14)"/><text x="99.4793%" y="543.50"></text></g><g><title>serde_json::value::Value::is_object (12 samples, 0.13%)</title><rect x="99.7504%" y="517" width="0.1303%" height="15" fill="rgb(238,103,29)"/><text x="100.0004%" y="527.50"></text></g><g><title>__libc_start_main (9,049 samples, 98.22%)</title><rect x="1.7692%" y="805" width="98.2199%" height="15" fill="rgb(233,195,47)"/><text x="2.0192%" y="815.50">__libc_start_main</text></g><g><title>main (9,049 samples, 98.22%)</title><rect x="1.7692%" y="789" width="98.2199%" height="15" fill="rgb(246,218,30)"/><text x="2.0192%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (9,049 samples, 98.22%)</title><rect x="1.7692%" y="773" width="98.2199%" height="15" fill="rgb(219,145,47)"/><text x="2.0192%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,049 samples, 98.22%)</title><rect x="1.7692%" y="757" width="98.2199%" height="15" fill="rgb(243,12,26)"/><text x="2.0192%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,049 samples, 98.22%)</title><rect x="1.7692%" y="741" width="98.2199%" height="15" fill="rgb(214,87,16)"/><text x="2.0192%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,049 samples, 98.22%)</title><rect x="1.7692%" y="725" width="98.2199%" height="15" fill="rgb(208,99,42)"/><text x="2.0192%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,049 samples, 98.22%)</title><rect x="1.7692%" y="709" width="98.2199%" height="15" fill="rgb(253,99,2)"/><text x="2.0192%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (9,049 samples, 98.22%)</title><rect x="1.7692%" y="693" width="98.2199%" height="15" fill="rgb(220,168,23)"/><text x="2.0192%" y="703.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,049 samples, 98.22%)</title><rect x="1.7692%" y="677" width="98.2199%" height="15" fill="rgb(242,38,24)"/><text x="2.0192%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>traverse_rs::main (9,049 samples, 98.22%)</title><rect x="1.7692%" y="661" width="98.2199%" height="15" fill="rgb(225,182,9)"/><text x="2.0192%" y="671.50">traverse_rs::main</text></g><g><title>traverse_rs::Finder::find (2,199 samples, 23.87%)</title><rect x="76.1207%" y="645" width="23.8684%" height="15" fill="rgb(243,178,37)"/><text x="76.3707%" y="655.50">traverse_rs::Finder::find</text></g><g><title>traverse_rs::Finder::find (2,182 samples, 23.68%)</title><rect x="76.3052%" y="629" width="23.6839%" height="15" fill="rgb(232,139,19)"/><text x="76.5552%" y="639.50">traverse_rs::Finder::find</text></g><g><title>traverse_rs::Finder::find (2,113 samples, 22.93%)</title><rect x="77.0542%" y="613" width="22.9350%" height="15" fill="rgb(225,201,24)"/><text x="77.3042%" y="623.50">traverse_rs::Finder::find</text></g><g><title>traverse_rs::Finder::find (1,904 samples, 20.67%)</title><rect x="79.3227%" y="597" width="20.6664%" height="15" fill="rgb(221,47,46)"/><text x="79.5727%" y="607.50">traverse_rs::Finder::find</text></g><g><title>traverse_rs::Finder::find (992 samples, 10.77%)</title><rect x="89.2218%" y="581" width="10.7674%" height="15" fill="rgb(249,23,13)"/><text x="89.4718%" y="591.50">traverse_rs::Fin..</text></g><g><title>traverse_rs::Finder::find (430 samples, 4.67%)</title><rect x="95.3218%" y="565" width="4.6673%" height="15" fill="rgb(219,9,5)"/><text x="95.5718%" y="575.50">trave..</text></g><g><title>traverse_rs::Finder::find (140 samples, 1.52%)</title><rect x="98.4696%" y="549" width="1.5196%" height="15" fill="rgb(254,171,16)"/><text x="98.7196%" y="559.50"></text></g><g><title>traverse_rs::Finder::find (41 samples, 0.45%)</title><rect x="99.5441%" y="533" width="0.4450%" height="15" fill="rgb(230,171,20)"/><text x="99.7941%" y="543.50"></text></g><g><title>traverse_rs::Finder::find (10 samples, 0.11%)</title><rect x="99.8806%" y="517" width="0.1085%" height="15" fill="rgb(210,71,41)"/><text x="100.1306%" y="527.50"></text></g><g><title>all (9,213 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(206,173,20)"/><text x="0.2500%" y="863.50"></text></g><g><title>traverse_rs (9,208 samples, 99.95%)</title><rect x="0.0543%" y="837" width="99.9457%" height="15" fill="rgb(233,88,34)"/><text x="0.3043%" y="847.50">traverse_rs</text></g><g><title>_start (9,050 samples, 98.23%)</title><rect x="1.7692%" y="821" width="98.2308%" height="15" fill="rgb(223,209,46)"/><text x="2.0192%" y="831.50">_start</text></g></svg></svg>